--==============================================================
-- DBMS NAME:      IBM DB2 UDB 8.X COMMON SERVER
-- CREATED ON:     2005-12-22 17:47:00
--==============================================================

--CREATE DATABASE OA USING CODESET UTF-8 TERRITORY CN

DROP TABLE AIR_TICKET;

DROP TABLE AIR_TICKET_RECHARGE;

DROP TABLE APPROVER_DELEGATE;

DROP TABLE CAPEX;

DROP TABLE CAPEX_DEPARTMENT;

DROP TABLE CAPEX_REQ_ITEM_HISTORY;

DROP TABLE CAPEX_REQUEST;

DROP TABLE CAPEX_REQUEST_APPROVER;

DROP TABLE CAPEX_REQUEST_ATTACH;

DROP TABLE CAPEX_REQUEST_HISTORY;

DROP TABLE CAPEX_REQUEST_ITEM;

DROP TABLE CITY;

DROP TABLE COUNTRY;

DROP TABLE CURRENCY;

DROP TABLE CUSTOMER;

DROP TABLE DEPARTMENT;

DROP TABLE EMAIL;

DROP TABLE EMAIL_BATCH;

DROP TABLE ERP_TRAN;

DROP TABLE EXCHANGE_RATE;

DROP TABLE EXP_CELL_DET_HIST;

DROP TABLE EXP_ROW_DET_HIST;

DROP TABLE EXPENSE;

DROP TABLE EXPENSE_APPROVER;

DROP TABLE EXPENSE_ATTACH;

DROP TABLE EXPENSE_CELL_DET;

DROP TABLE EXPENSE_CLAIM;

DROP TABLE EXPENSE_CTGY;

DROP TABLE EXPENSE_HISTORY;

DROP TABLE EXPENSE_RECHARGE;

DROP TABLE EXPENSE_ROW_DET;

DROP TABLE EXPENSE_SUBCTGY;

DROP TABLE GLOBAL_MAIL_RMD;

DROP TABLE GLOBAL_PARA;

DROP TABLE HOTEL;

DROP TABLE HOTEL_CONTRACT;

DROP TABLE HOTEL_ROOM;

DROP TABLE KPI_SUMMARY;

DROP TABLE KPI_SUM_PURCTGY;

DROP TABLE KPI_SUM_EXPCTGY;

DROP TABLE MENU;

DROP TABLE METADATA_DET;

DROP TABLE METADATA_MST;

DROP TABLE OA_FUNCTION;

DROP TABLE OA_USER;

DROP TABLE PAYMENT_SCHDL_DET;

DROP TABLE PO_APPROVER;

DROP TABLE PO_ATTACH;

DROP TABLE PO_HISTORY;

DROP TABLE PO_ITEM;

DROP TABLE PO_ITEM_ATTACH;

DROP TABLE PO_ITEM_CANCEL;

DROP TABLE PO_ITEM_HISTORY;

DROP TABLE PO_ITEM_RECEIPT;

DROP TABLE PO_ITEM_RECHARGE;

DROP TABLE PR_APPROVER;

DROP TABLE PR_ATTACH;

DROP TABLE PR_AUTHORIZED_PURCHASER;

DROP TABLE PR_HISTORY;

DROP TABLE PR_ITEM;

DROP TABLE PR_ITEM_ATTACH;

DROP TABLE PR_ITEM_HISTORY;

DROP TABLE PR_ITEM_RECHARGE;

DROP TABLE PROVINCE;

DROP TABLE PURCHASE_CTGY;

DROP TABLE PURCHASE_ORDER;

DROP TABLE PURCHASE_REQUEST;

DROP TABLE PURCHASE_SUBCTGY;

DROP TABLE PURCHASE_TYPE;

DROP TABLE ROLE;

DROP TABLE ROLE_FUNCTION;

DROP TABLE RULE;

DROP TABLE RULE_CONDITION;

DROP TABLE RULE_CONSEQUENCE;

DROP TABLE RULE_FLOW;

DROP TABLE RULE_FLOW_RULE;

DROP TABLE SITE;

DROP TABLE SITE_MAIL_RMD;

DROP TABLE SUPPLIER;

DROP TABLE SUPPLIER_CONTRACT;

DROP TABLE SUPPLIER_HISTORY;

DROP TABLE SUPPLIER_ITEM;

DROP TABLE SYSTEM_LOG;

DROP TABLE TA_APPROVER;

DROP TABLE TA_HISTORY;

DROP TABLE TRAVEL_APPLICATION;

DROP TABLE TRAVEL_GROUP_DET;

DROP TABLE TRAVEL_GROUP_MST;

DROP TABLE USER_DEPARTMENT;

DROP TABLE USER_ROLE;

DROP TABLE USER_SITE;

DROP TABLE YEARLY_BGT_DEP_HISTORY;

DROP TABLE YEARLY_BUDGET;

DROP TABLE YEARLY_BUDGET_DEPARTMENT;

DROP TABLE YEARLY_BUDGET_HISTORY;

--==============================================================
-- TABLE: AIR_TICKET
--==============================================================

CREATE TABLE AIR_TICKET
(
   AIR_TICKET_ID      INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   TA_NO              VARCHAR(16)            NOT NULL,
   PO_ITEM_ID         INTEGER,
   RTN_PO_ITEM_ID     INTEGER,
   SUPP_ID            INTEGER,
   LVE_FLT_NO         VARCHAR(20),
   LVE_FLT_CLASS      INTEGER,
   LVE_FLT_FR         SMALLINT,
   LVE_FLT_TO         SMALLINT,
   LVE_FLT_DEPART     TIMESTAMP,
   LVE_FLT_ARRIVE     TIMESTAMP,
   RTN_FLT_NO         VARCHAR(20),
   RTN_FLT_CLASS      INTEGER,
   RTN_FLT_FR         SMALLINT,
   RTN_FLT_TO         SMALLINT,
   RTN_FLT_DEPART     TIMESTAMP,
   RTN_FLT_ARRIVE     TIMESTAMP,
   EXCH_RATE_ID       INTEGER                NOT NULL,
   EXCHANGE_RATE      NUMERIC(11,4)          NOT NULL,
   PRICE              NUMERIC(8,2)           NOT NULL,
   IS_RECHARGE        INTEGER                NOT NULL,
   STATUS             INTEGER                NOT NULL,
   PUR_TYPE_CD        VARCHAR(8),
   BOARDING_PASS_RECEIVED INTEGER            NOT NULL,
   PRIMARY KEY (AIR_TICKET_ID)
);

--==============================================================
-- TABLE: AIR_TICKET_RECHARGE
--==============================================================
CREATE TABLE AIR_TICKET_RECHARGE
(
   TKT_RECHRG_ID      INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   AIR_TICKET_ID      INTEGER                NOT NULL,
   CUST_CD            VARCHAR(17),
   PERSON_DEP_ID      SMALLINT,
   PERSON_ID          INTEGER,
   AMOUNT             NUMERIC(9,2)           NOT NULL,
   PRIMARY KEY (TKT_RECHRG_ID)
);

--==============================================================
-- TABLE: APPROVER_DELEGATE
--==============================================================
CREATE TABLE APPROVER_DELEGATE
(
   DLGT_ID            INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   DLGT_TYPE          INTEGER                NOT NULL,
   ORG_APPROVER       INTEGER                NOT NULL,
   DLGT_APPROVER      INTEGER                NOT NULL,
   DLGT_FR_DATE       TIMESTAMP,
   DLGT_TO_DATE       TIMESTAMP,
   PRIMARY KEY (DLGT_ID)
);

--==============================================================
-- TABLE: CAPEX
--==============================================================
CREATE TABLE CAPEX
(
   CAPEX_NO           VARCHAR(16)            NOT NULL,
   CAPEX_SITE         SMALLINT               NOT NULL,
   PUR_CTGY_ID        INTEGER,
   PUR_SUBCTGY_ID     INTEGER,
   BASE_CURR_CD       VARCHAR(8)             NOT NULL,
   BUDGET_ID          INTEGER,
   CAPEX_REQ_ID       INTEGER,
   ROW_VERSION        INTEGER                NOT NULL,
   CAPEX_ACTUALAMT    NUMERIC(14,2)          NOT NULL,
   CAPEX_YEAR         INTEGER                NOT NULL,
   PRIMARY KEY (CAPEX_NO)
);

--==============================================================
-- TABLE: CAPEX_DEPARTMENT
--==============================================================
CREATE TABLE CAPEX_DEPARTMENT
(
   CAPEX_DEPART_ID    INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   CAPEX_NO           VARCHAR(16)            NOT NULL,
   CAPEX_DEP_ID       SMALLINT               NOT NULL,
   PRIMARY KEY (CAPEX_DEPART_ID)
);

--==============================================================
-- TABLE: CAPEX_REQ_ITEM_HISTORY
--==============================================================
CREATE TABLE CAPEX_REQ_ITEM_HISTORY
(
   CR_ITEM_HIST_ID    INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   CR_HIST_ID         INTEGER                NOT NULL,
   PUR_SUBCTGY_ID     INTEGER                NOT NULL,
   SUPP_ID            INTEGER,
   SUPP_NM            VARCHAR(50),
   ITEM_ID            INTEGER,
   ITEM_SEPC          VARCHAR(255)           NOT NULL,
   EXCH_RATE_ID       INTEGER                NOT NULL,
   EXCHANGE_RATE      NUMERIC(11,4)          NOT NULL,
   UNIT_PRICE         NUMERIC(12,2)          NOT NULL,
   QUANTITY           INTEGER                NOT NULL,
   PRIMARY KEY (CR_ITEM_HIST_ID)
);

--==============================================================
-- TABLE: CAPEX_REQUEST
--==============================================================
CREATE TABLE CAPEX_REQUEST
(
   CAPEX_REQ_ID       INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   CAPEX_NO           VARCHAR(16)            NOT NULL,
   CR_TYPE            INTEGER                NOT NULL,
   CR_TITLE           VARCHAR(50)            NOT NULL,
   CR_DESC            VARCHAR(500),
   CR_STATUS          INTEGER                NOT NULL,
   BASE_AMT           NUMERIC(14,2)          NOT NULL,
   CREATOR            INTEGER                NOT NULL,
   CREATE_DATE        TIMESTAMP              NOT NULL,
   REQUESTOR          INTEGER                NOT NULL,
   REQ_DATE           TIMESTAMP,
   LIST_ID            VARCHAR(32),
   -- New fields down add for new capex form
   ACTIVITY           VARCHAR(50)            NOT NULL,
   POST_AUDIT_DATE	  TIMESTAMP,
   FIRST_EXP_DATE     TIMESTAMP,
   LAST_EXP_DATE      TIMESTAMP,
   COMPLEATION_DATE   TIMESTAMP,
   PROJ_LEADER_ID     INTEGER,
   PROJ_LEADER_TITLE  VARCHAR(100),
   ACCOUNTING_CD      VARCHAR(32),
   IS_CAPEX_TYPE      INTEGER                NOT NULL, 
   IS_ASSET_TYPE      INTEGER                NOT NULL, 
   OTHER_TYPE         VARCHAR(100),   
   IS_NEW_IMP_REASON  INTEGER                NOT NULL, 
   IS_CPT_INC_REASON  INTEGER                NOT NULL, 
   IS_CST_IMP_REASON  INTEGER                NOT NULL, 
   IS_NEW_PDT_REASON  INTEGER                NOT NULL, 
   IS_DOWNSIZ_REASON  INTEGER                NOT NULL, 
   IS_HSE_REASON      INTEGER                NOT NULL, 
   OTHER_REASON       VARCHAR(100),
   CAPEX_CAPITAL_AMT  NUMERIC(14,2)          NOT NULL,
   OTHER_EXPENSE_AMT  NUMERIC(14,2)          NOT NULL,
   ASSET_DISPOSAL_AMT NUMERIC(14,2)          NOT NULL,
   GROSS_BOOK_AMT     NUMERIC(14,2)          NOT NULL,
   PROJ_IMPCT_NON1    VARCHAR(100),
   PROJ_IMPCT_NON2    VARCHAR(100),
   PROJ_IMPCT_OTHER1  VARCHAR(100),
   PROJ_IMPCT_OTHER2  VARCHAR(100),
   PROJ_IMPCT_OTHER3  VARCHAR(100),
   REF_CURR_CD        VARCHAR(8)             NOT NULL, 
   REF_EXCHANGE_RATE  NUMERIC(11,4)          NOT NULL,
   LST_FORECAST_AMT   NUMERIC(14,2),
   DISCOUNT_CASH_FLOW NUMERIC(9,2),
   NPV_LC             NUMERIC(14,2),
   INTERNAL_RTN_RATE  NUMERIC(5,2),
   DISCOUNT_RATE      NUMERIC(5,2),
   -- New fields up add for new capex form
   APPROVE_DATE       TIMESTAMP,
   PRIMARY KEY (CAPEX_REQ_ID)
);

--==============================================================
-- TABLE: CAPEX_REQUEST_APPROVER
--==============================================================
CREATE TABLE CAPEX_REQUEST_APPROVER
(
   LIST_ID            VARCHAR(32)            NOT NULL,
   APPROVER_ID        INTEGER                NOT NULL,
   APPROVE_SEQ        SMALLINT               NOT NULL,
   APPROVE_STATUS     INTEGER                NOT NULL,
   APPROVE_DATE       TIMESTAMP,
   APPROVE_COMMENT    VARCHAR(255),
   CAN_MODIFY         INTEGER                NOT NULL,
   ACTUAL_APPROVER    INTEGER,
   YOUR_TURN_DATE 	  TIMESTAMP,
   EMAIL_DATE		  TIMESTAMP,
   EMAIL_TIMES		  INTEGER                NOT NULL DEFAULT 0,   
   PRIMARY KEY (LIST_ID, APPROVER_ID)
);

--==============================================================
-- TABLE: CAPEX_REQUEST_ATTACH
--==============================================================
CREATE TABLE CAPEX_REQUEST_ATTACH
(
   ATTACH_ID          INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   CAPEX_REQ_ID       INTEGER                NOT NULL,
   FILE_TITLE         VARCHAR(50)            NOT NULL,
   FILE_NAME          VARCHAR(255)           NOT NULL,
   FILE_CONTENT       BLOB(2M)               NOT LOGGED NOT COMPACT,
   UPLOAD_DATE        TIMESTAMP              NOT NULL,
   CONT_FILE_SIZE     INTEGER                NOT NULL,
   PRIMARY KEY (ATTACH_ID)
);

--==============================================================
-- TABLE: CAPEX_REQUEST_HISTORY
--==============================================================
CREATE TABLE CAPEX_REQUEST_HISTORY
(
   CR_HIST_ID         INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   CAPEX_REQ_ID       INTEGER                NOT NULL,
   CAPEX_STATUS       INTEGER                NOT NULL,
   BASE_AMT           NUMERIC(14,2)          NOT NULL,
   LIST_ID            VARCHAR(32)            NOT NULL,
   PRIMARY KEY (CR_HIST_ID)
);

--==============================================================
-- TABLE: CAPEX_REQUEST_ITEM
--==============================================================
CREATE TABLE CAPEX_REQUEST_ITEM
(
   CR_ITEM_ID         INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   CAPEX_REQ_ID       INTEGER                NOT NULL,
   PUR_SUBCTGY_ID     INTEGER                NOT NULL,
   SUPP_ID            INTEGER,
   SUPP_NM            VARCHAR(50),
   ITEM_ID            INTEGER,
   ITEM_SEPC          VARCHAR(255)           NOT NULL,
   EXCH_RATE_ID       INTEGER                NOT NULL,
   EXCHANGE_RATE      NUMERIC(11,4)          NOT NULL,
   UNIT_PRICE         NUMERIC(12,2)          NOT NULL,
   QUANTITY           INTEGER                NOT NULL,
   PRIMARY KEY (CR_ITEM_ID)
);

--==============================================================
-- TABLE: CITY
--==============================================================
CREATE TABLE CITY
(
   CITY_ID            SMALLINT               NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   PROVINCE_ID        SMALLINT               NOT NULL,
   MAINT_SITE         SMALLINT,
   ENG_NAME           VARCHAR(50)            NOT NULL,
   SEC_NAME           VARCHAR(50)            NOT NULL,
   IS_ENABLED         INTEGER                NOT NULL DEFAULT 1,
   PRIMARY KEY (CITY_ID)
);

--==============================================================
-- TABLE: COUNTRY
--==============================================================
CREATE TABLE COUNTRY
(
   COUNTRY_ID         SMALLINT               NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   MAINT_SITE         SMALLINT,
   SHORT_NAME         VARCHAR(3)             NOT NULL,
   ENG_NAME           VARCHAR(50)            NOT NULL,
   SEC_NAME           VARCHAR(50)            NOT NULL,
   IS_ENABLED         INTEGER                NOT NULL DEFAULT 1,
   PRIMARY KEY (COUNTRY_ID)
);

--==============================================================
-- TABLE: CURRENCY
--==============================================================
CREATE TABLE CURRENCY
(
   CURR_CD            VARCHAR(8)             NOT NULL,
   CURR_NM            VARCHAR(50)            NOT NULL,
   IS_ENABLED         INTEGER                NOT NULL DEFAULT 1,
   PRIMARY KEY (CURR_CD)
);

--==============================================================
-- TABLE: CUSTOMER
--==============================================================
CREATE TABLE CUSTOMER
(
   CUST_CD            VARCHAR(17)             NOT NULL,
   CUST_SITE          SMALLINT               NOT NULL,
   CUST_DESC          VARCHAR(50)            NOT NULL,
   CUST_TYPE          INTEGER                NOT NULL,
   IS_ENABLED         INTEGER                NOT NULL,
   PRIMARY KEY (CUST_CD)
);

--==============================================================
-- TABLE: DEPARTMENT
--==============================================================
CREATE TABLE DEPARTMENT
(
   DEP_ID             SMALLINT               NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   DEP_SITE           SMALLINT               NOT NULL,
   PARENT_ID          SMALLINT,
   IS_ENABLED         INTEGER                NOT NULL DEFAULT 1,
   DEP_MGR            INTEGER,
   DEP_NAME           VARCHAR(100)           NOT NULL,
   PRIMARY KEY (DEP_ID)
);

--==============================================================
-- TABLE: EMAIL
--==============================================================
CREATE TABLE EMAIL
(
   EMAIL_ID           INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   MAIL_FR            VARCHAR(100)           NOT NULL,
   MAIL_TO            VARCHAR(100)           NOT NULL,
   SUBJECT            VARCHAR(100)           NOT NULL,
   BODY               CLOB(2M)               NOT LOGGED NOT COMPACT,
   CREATE_TIME        TIMESTAMP              NOT NULL,
   SEND_TIME          TIMESTAMP,
   FAIL_COUNT         INTEGER                NOT NULL DEFAULT 0,
   SITE				  SMALLINT				 NOT NULL,
   WAIT_TO_SEND       INTEGER                NOT NULL DEFAULT 1,
   PRIMARY KEY (EMAIL_ID)
);

--==============================================================
-- TABLE: EMAIL_BATCH
--==============================================================
CREATE TABLE EMAIL_BATCH
(
   EMAIL_BATCH_ID     INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   MAIL_TO_USER		  INTEGER				 NOT NULL,
   BODY               CLOB(2M)               NOT LOGGED NOT COMPACT,
   TEMPLATE_NAME	  VARCHAR(100)           NOT NULL,
   REF_NO	  		  VARCHAR(16),
   SITE				  SMALLINT				 NOT NULL,
   IS_SEND			  INTEGER                NOT NULL,
   PRIMARY KEY (EMAIL_BATCH_ID)
);

--==============================================================
-- TABLE: ERP_TRAN
--==============================================================
CREATE TABLE ERP_TRAN
(
   SITE_ID            SMALLINT               NOT NULL,
   START_TIME         TIMESTAMP,
   TIME_PER_DAY       SMALLINT,
   INTERVAL_MIN       SMALLINT,
   SUCC_MAIL_TO       VARCHAR(150),
   FAIL_MAIL_TO       VARCHAR(150),
   EXPORT_FILE_TYPE   INTEGER                NOT NULL,
   SERV_ADDR          VARCHAR(50),
   SERV_PORT          SMALLINT,
   SERV_USER          VARCHAR(50),
   SERV_PWD           VARCHAR(50),
   SERV_DIR           VARCHAR(255),
   PRIMARY KEY (SITE_ID)
);

--==============================================================
-- TABLE: EXCHANGE_RATE
--==============================================================
CREATE TABLE EXCHANGE_RATE
(
   EXCH_RATE_ID         INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   CURR_CODE            VARCHAR(8)             NOT NULL,
   SITE_ID              SMALLINT               NOT NULL,
   EXCHANGE_RATE        NUMERIC(11,4),
   PRIMARY KEY (EXCH_RATE_ID)
);

--==============================================================
-- TABLE: EXP_CELL_DET_HIST
--==============================================================
CREATE TABLE EXP_CELL_DET_HIST
(
   EXP_HIST_CEL_ID    INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   EXP_HIST_ROW_ID    INTEGER,
   EXP_SUBCTGY_ID     INTEGER                NOT NULL,
   EXP_AMT            NUMERIC(8,2)           NOT NULL,
   EXP_DESC           VARCHAR(255),
   PRIMARY KEY (EXP_HIST_CEL_ID)
);

--==============================================================
-- TABLE: EXP_ROW_DET_HIST
--==============================================================
CREATE TABLE EXP_ROW_DET_HIST
(
   EXP_HIST_ROW_ID    INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   EXP_HIST_ID        INTEGER                NOT NULL,
   EXP_DATE           TIMESTAMP              NOT NULL,
   PRIMARY KEY (EXP_HIST_ROW_ID)
);

--==============================================================
-- TABLE: EXPENSE
--==============================================================
CREATE TABLE EXPENSE
(
   EXP_NO             VARCHAR(16)            NOT NULL,
   TA_NO              VARCHAR(16),
   EXP_DEP            SMALLINT               NOT NULL,
   EXP_TITLE          VARCHAR(50)            NOT NULL,
   EXP_DESC           VARCHAR(500),
   EXP_STATUS         INTEGER                NOT NULL,
   EXP_CTGY_ID        INTEGER                NOT NULL,
   EXP_CURR_CD        VARCHAR(8)             NOT NULL,
   EXP_AMT            NUMERIC(9,2)           NOT NULL,
   BASE_CURR_CD       VARCHAR(8)             NOT NULL,
   EXCHANGE_RATE      NUMERIC(11,4)          NOT NULL,
   REQUESTOR          INTEGER                NOT NULL,
   REQ_DATE           TIMESTAMP,
   CREATOR            INTEGER                NOT NULL,
   CREATE_DATE        TIMESTAMP              NOT NULL,
   IS_RECHARGE        INTEGER                NOT NULL,
   LIST_ID            VARCHAR(32),
   EXPORT_STATUS      INTEGER                NOT NULL,
   APPROVE_DATE       TIMESTAMP,
   EXP_CONFIRM_AMT    NUMERIC(9,2),
   EMAIL_DATE         TIMESTAMP,
   EMAIL_TIMES        INTEGER                NOT NULL DEFAULT 0,
   CONFIRM_DATE       TIMESTAMP,
   PRIMARY KEY (EXP_NO)
);

--==============================================================
-- TABLE: EXPENSE_APPROVER
--==============================================================
CREATE TABLE EXPENSE_APPROVER
(
   LIST_ID            VARCHAR(32)            NOT NULL,
   APPROVER_ID        INTEGER                NOT NULL,
   APPROVE_SEQ        SMALLINT               NOT NULL,
   APPROVE_STATUS     INTEGER,
   APPROVE_DATE       TIMESTAMP,
   APPROVE_COMMENT    VARCHAR(255),
   CAN_MODIFY         INTEGER                NOT NULL,
   ACTUAL_APPROVER    INTEGER,
   YOUR_TURN_DATE 	  TIMESTAMP,
   EMAIL_DATE		  TIMESTAMP,
   EMAIL_TIMES		  INTEGER                NOT NULL DEFAULT 0,   
   PRIMARY KEY (LIST_ID, APPROVER_ID)
);

--==============================================================
-- TABLE: EXPENSE_ATTACH
--==============================================================
CREATE TABLE EXPENSE_ATTACH
(
   EXP_ATTACH_ID      INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   EXP_NO             VARCHAR(16)            NOT NULL,
   FILE_TITLE         VARCHAR(50)            NOT NULL,
   FILE_NAME          VARCHAR(255)           NOT NULL,
   FILE_CONTENT       BLOB(2M)               NOT LOGGED NOT COMPACT,
   UPLOAD_DATE        TIMESTAMP              NOT NULL,
   CONT_FILE_SIZE     INTEGER                NOT NULL,
   PRIMARY KEY (EXP_ATTACH_ID)
);

--==============================================================
-- TABLE: EXPENSE_CELL_DET
--==============================================================
CREATE TABLE EXPENSE_CELL_DET
(
   EXP_CELL_ID        INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   EXP_ROW_ID         INTEGER                NOT NULL,
   EXP_SUBCTGY_ID     INTEGER                NOT NULL,
   EXP_AMT            NUMERIC(8,2)           NOT NULL,
   EXP_DESC           VARCHAR(255),
   PRIMARY KEY (EXP_CELL_ID)
);

--==============================================================
-- TABLE: EXPENSE_CLAIM
--==============================================================
CREATE TABLE EXPENSE_CLAIM
(
   EXP_CLAIM_ID       INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   EXP_NO             VARCHAR(16)            NOT NULL,
   EXP_SUBCTGY_ID     INTEGER                NOT NULL,
   EXP_AMT            NUMERIC(9,2)           NOT NULL,
   EXP_DESC           VARCHAR(3000),
   PRIMARY KEY (EXP_CLAIM_ID)
);

--==============================================================
-- TABLE: EXPENSE_CTGY
--==============================================================
CREATE TABLE EXPENSE_CTGY
(
   EXP_CTGY_ID        INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   EXP_CTGY_DESC      VARCHAR(50)            NOT NULL,
   EXP_CTGY_SITE      SMALLINT               NOT NULL,
   EXP_CTGY_TYPE      INTEGER                NOT NULL,
   REF_ERP_NO         VARCHAR(8),
   IS_ENABLED         INTEGER                NOT NULL DEFAULT 1,
   PRIMARY KEY (EXP_CTGY_ID)
);

--==============================================================
-- TABLE: EXPENSE_HISTORY
--==============================================================
CREATE TABLE EXPENSE_HISTORY
(
   EXP_HIST_ID        INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   EXP_NO             VARCHAR(16)            NOT NULL,
   EXP_STATUS         INTEGER                NOT NULL,
   EXCHANGE_RATE      NUMERIC(11,4)          NOT NULL,
   LIST_ID            VARCHAR(32)            NOT NULL,
   PRIMARY KEY (EXP_HIST_ID)
);

--==============================================================
-- TABLE: EXPENSE_RECHARGE
--==============================================================
CREATE TABLE EXPENSE_RECHARGE
(
   EXP_RECHARGE_ID    INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   EXP_NO             VARCHAR(16)            NOT NULL,
   CUST_CD            VARCHAR(17),
   PERSON_DEP_ID      SMALLINT,
   PERSON_ID          INTEGER,
   AMOUNT             NUMERIC(9,2)           NOT NULL,
   PRIMARY KEY (EXP_RECHARGE_ID)
);

--==============================================================
-- TABLE: EXPENSE_ROW_DET
--==============================================================
CREATE TABLE EXPENSE_ROW_DET
(
   EXP_ROW_ID         INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   EXP_NO             VARCHAR(16)            NOT NULL,
   EXP_DATE           TIMESTAMP              NOT NULL,
   PRIMARY KEY (EXP_ROW_ID)
);

--==============================================================
-- TABLE: EXPENSE_SUBCTGY
--==============================================================
CREATE TABLE EXPENSE_SUBCTGY
(
   EXP_SUBCTGY_ID     INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   EXP_CTGY_ID        INTEGER                NOT NULL,
   EXP_SUBCTGY_DES    VARCHAR(50)            NOT NULL,
   IS_HOTEL           INTEGER                NOT NULL,
   REF_ERP_NO         VARCHAR(8),
   IS_ENABLED         INTEGER                NOT NULL DEFAULT 1,
   PRIMARY KEY (EXP_SUBCTGY_ID)
);

--==============================================================
-- TABLE: GLOBAL_MAIL_RMD
--==============================================================
CREATE TABLE GLOBAL_MAIL_RMD
(
   MD_DET_ID          INTEGER                NOT NULL,
   DUE_DAY            SMALLINT,
   INTERVAL_DAY       SMALLINT,
   MAX_TIME           SMALLINT,
   PRIMARY KEY (MD_DET_ID)
);

--==============================================================
-- TABLE: GLOBAL_PARA
--==============================================================
CREATE TABLE GLOBAL_PARA
(
   GLOBAL_PARA_ID     INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   SMTP_ADDR          VARCHAR(50),
   SMTP_USER          VARCHAR(50),
   SMTP_PWD           VARCHAR(50),
   MIN_PWD_LEN        SMALLINT,
   PWD_EXPIRE_DAY     SMALLINT,
   MAX_WRG_PWD_LMT    SMALLINT,
   IS_LDAP_AUTH       INTEGER                NOT NULL,
   LDAP_SER_NM        VARCHAR(50),
   LDAP_SER_IP        VARCHAR(50),
   LDAP_SER_PORT      SMALLINT,
   LDAP_ROOT_DN       VARCHAR(50),
   LDAP_USERNAME      VARCHAR(50),
   LDAP_PASSWORD      VARCHAR(50),
   LDAP_QUERY         VARCHAR(50),
   LDAP_FILTER        VARCHAR(50),
   PRIMARY KEY (GLOBAL_PARA_ID)
);

--==============================================================
-- TABLE: HOTEL
--==============================================================
CREATE TABLE HOTEL
(
   HOTEL_ID           INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   HOTEL_NM           VARCHAR(500)            NOT NULL,
   HOTEL_SITE         SMALLINT,
   HOTEL_CITY         SMALLINT               NOT NULL,
   HOTEL_ADDR         VARCHAR(500),
   HOTEL_CURR         VARCHAR(10)             NOT NULL,
   HOTEL_DESC         VARCHAR(500),
   HOTEL_SPEC         VARCHAR(500),
   HOTEL_TELE         VARCHAR(50),
   HOTEL_FAX          VARCHAR(50),
   HOTEL_LEVEL        INTEGER                NOT NULL,
   CONT_FR_DATE       TIMESTAMP,
   CONT_TO_DATE       TIMESTAMP,
   PROMOTE_MSG        VARCHAR(500),
   PROMOTE_STATUS     INTEGER                NOT NULL,
   PROMOTE_DATE       TIMESTAMP,
   IS_ENABLED         INTEGER                NOT NULL DEFAULT 1,
   EMAIL_DATE         TIMESTAMP,
   EMAIL_TIMES        INTEGER                NOT NULL DEFAULT 0,
   HOTEL_CONTACT	  VARCHAR(100),
   HOTEL_EMAIL		  VARCHAR(150),
   PRIMARY KEY (HOTEL_ID)
);

--==============================================================
-- TABLE: HOTEL_CONTRACT
--==============================================================
CREATE TABLE HOTEL_CONTRACT
(
   CONT_ID            INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   HOTEL_ID           INTEGER                NOT NULL,
   CONT_FILE_NM       VARCHAR(50)            NOT NULL,
   CONT_FILE_DESC     VARCHAR(20)            NOT NULL,
   CONT_FILECONTNT    BLOB(2M)               NOT LOGGED NOT COMPACT,
   CONT_UPLOADDATE    TIMESTAMP              NOT NULL,
   CONT_FILE_SIZE     INTEGER                NOT NULL,
   PRIMARY KEY (CONT_ID)
);

--==============================================================
-- TABLE: HOTEL_ROOM
--==============================================================
CREATE TABLE HOTEL_ROOM
(
   ROOM_ID            INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   HOTEL_ID           INTEGER                NOT NULL,
   ROOM_NM            VARCHAR(500)           NOT NULL,
   ROOM_PRICE         NUMERIC(9,2)           NOT NULL,
   ROOM_DISCOUNT      SMALLINT,
   ROOM_NETWORK       VARCHAR(255),
   ROOM_DESC          VARCHAR(1000),
   IS_ENABLED         INTEGER                NOT NULL DEFAULT 1,
   ROOM_BREAKFAST	  VARCHAR(255),
   PRIMARY KEY (ROOM_ID)
);


--==============================================================
-- TABLE: KPI_SUMMARY
--==============================================================
CREATE TABLE KPI_SUMMARY
(
   KPI_SUMMARY_ID     INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   SUMMARY_DATE       TIMESTAMP              NOT NULL,
   LOGIN_USER_COUNT   INTEGER                NOT NULL DEFAULT 0,
   TA_CLOSED          INTEGER                NOT NULL DEFAULT 0,
   AVG_TA_CLOSED_DAYS NUMERIC(9,2)           NOT NULL DEFAULT 0,
   TA_CREATED         INTEGER                NOT NULL DEFAULT 0,
   CAPEX_CLOSED       INTEGER                NOT NULL DEFAULT 0,
   AVG_CE_CLOSED_DAYS NUMERIC(9,2)           NOT NULL DEFAULT 0,
   CAPEX_CREATED      INTEGER                NOT NULL DEFAULT 0,
   PR_CLOSED          INTEGER                NOT NULL DEFAULT 0,
   AVG_PR_CLOSED_DAYS NUMERIC(9,2)           NOT NULL DEFAULT 0,
   PR_CREATED         INTEGER                NOT NULL DEFAULT 0,
   EXPENSE_CLOSED     INTEGER                NOT NULL DEFAULT 0,
   AVG_EX_CLOSED_DAYS NUMERIC(9,2)           NOT NULL DEFAULT 0,
   EXPENSE_CREATED    INTEGER                NOT NULL DEFAULT 0,
   PRIMARY KEY (KPI_SUMMARY_ID)
);

--==============================================================
-- TABLE: KPI_SUM_PURCTGY
--==============================================================
CREATE TABLE KPI_SUM_PURCTGY
(
   KPI_SUM_PURCTGY_ID INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY, 
   KPI_SUMMARY_ID     INTEGER                NOT NULL, 
   SITE_ID            SMALLINT               NOT NULL,
   SUMMARY_DATE       TIMESTAMP              NOT NULL,
   PR_CATEGRY_ID      INTEGER                NOT NULL,
   PR_CREATED         INTEGER                NOT NULL DEFAULT 0,
   PRIMARY KEY (KPI_SUM_PURCTGY_ID)
);

--==============================================================
-- TABLE: KPI_SUM_EXPCTGY
--==============================================================
CREATE TABLE KPI_SUM_EXPCTGY
(
   KPI_SUM_EXPCTGY_ID INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY, 
   KPI_SUMMARY_ID     INTEGER                NOT NULL, 
   SITE_ID            SMALLINT               NOT NULL,
   SUMMARY_DATE       TIMESTAMP              NOT NULL,
   EXP_REQ_CATEGRY_ID INTEGER                NOT NULL,
   EXP_REQ_CREATED    INTEGER                NOT NULL DEFAULT 0,
   PRIMARY KEY (KPI_SUM_EXPCTGY_ID)
);

--==============================================================
-- TABLE: MENU
--==============================================================
CREATE TABLE MENU
(
   MENU_ID            INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   MENU_NM            VARCHAR(100)           NOT NULL,
   MENU_DESC          VARCHAR(255),
   SEC_MENU_NM        VARCHAR(100)           NOT NULL,
   SEC_MENU_DESC      VARCHAR(255),
   FUNC_ID            INTEGER,
   URL                VARCHAR(255),
   PARENT_ID          INTEGER,
   ONCLICK            VARCHAR(100),
   ONMOUSE_OVER       VARCHAR(100),
   ONMOUSE_DOWN       VARCHAR(100),
   PRIMARY KEY (MENU_ID)
);

--==============================================================
-- TABLE: METADATA_DET
--==============================================================
CREATE TABLE METADATA_DET
(
   MD_DET_ID          INTEGER                NOT NULL,
   MD_MST_ID          INTEGER                NOT NULL,
   ENG_FULL_DESC      VARCHAR(255)           NOT NULL,
   SEC_FULL_DESC      VARCHAR(255)           NOT NULL,
   ENG_SHORT_DESC     VARCHAR(255)           NOT NULL,
   SEC_SHORT_DESC     VARCHAR(255)           NOT NULL,
   COLOR              VARCHAR(20),
   PRIMARY KEY (MD_DET_ID, MD_MST_ID)
);

--==============================================================
-- TABLE: METADATA_MST
--==============================================================
CREATE TABLE METADATA_MST
(
   MD_MST_ID          INTEGER                NOT NULL,
   MD_MST_DESC        VARCHAR(80)            NOT NULL,
   PRIMARY KEY (MD_MST_ID)
);

--==============================================================
-- TABLE: OA_FUNCTION
--==============================================================
CREATE TABLE OA_FUNCTION
(
   FUNC_ID            INTEGER                NOT NULL,
   FUNC_NM            VARCHAR(50)            NOT NULL,
   FUNC_DESC          VARCHAR(255),
   PRIMARY KEY (FUNC_ID)
);

--==============================================================
-- TABLE: OA_USER
--==============================================================
CREATE TABLE OA_USER
(
   USER_ID            INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   USER_CD            VARCHAR(20)            NOT NULL,
   USER_PWD           CHAR(32)               NOT NULL,
   USER_NM            VARCHAR(50)            NOT NULL,
   GENDER             INTEGER                NOT NULL,
   EMAIL              VARCHAR(150)           NOT NULL,
   TELE_NO            VARCHAR(50),
   PRIMARY_SITE       SMALLINT               NOT NULL,
   PWD_HINT_QUEST     VARCHAR(255),
   PWD_HINT_ANSWER    VARCHAR(255),
   LAST_LOGIN_TIME    TIMESTAMP,
   LOGIN_FAIL_TIME    SMALLINT               NOT NULL,
   LOCALE             VARCHAR(20),
   IS_ENABLED         INTEGER                NOT NULL DEFAULT 1,
   PRIMARY KEY (USER_ID)
);

--==============================================================
-- TABLE: PAYMENT_SCHDL_DET
--==============================================================
CREATE TABLE PAYMENT_SCHDL_DET
(
   PSD_ID             INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   PO_NO              VARCHAR(16),
   PSD_DESC           VARCHAR(255)           NOT NULL,
   PSD_DATE           TIMESTAMP              NOT NULL,
   PSD_AMT            NUMERIC(14,2)          NOT NULL,
   PRIMARY KEY (PSD_ID)
);

--==============================================================
-- TABLE: PO_APPROVER
--==============================================================
CREATE TABLE PO_APPROVER
(
   LIST_ID            VARCHAR(32)            NOT NULL,
   APPROVER_ID        INTEGER                NOT NULL,
   APPROVE_SEQ        SMALLINT               NOT NULL,
   APPROVE_STATUS     INTEGER                NOT NULL,
   APPROVE_DATE       TIMESTAMP,
   APPROVE_COMMENT    VARCHAR(255),
   CAN_MODIFY         INTEGER                NOT NULL,
   ACTUAL_APPROVER    INTEGER,
   YOUR_TURN_DATE 	  TIMESTAMP,
   EMAIL_DATE		  TIMESTAMP,
   EMAIL_TIMES		  INTEGER                NOT NULL DEFAULT 0,   
   PRIMARY KEY (LIST_ID, APPROVER_ID)
);

--==============================================================
-- TABLE: PO_ATTACH
--==============================================================
CREATE TABLE PO_ATTACH
(
   PO_ATTACH_ID       INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   PO_NO              VARCHAR(16),
   FILE_TITLE         VARCHAR(50)            NOT NULL,
   FILE_NAME          VARCHAR(255)           NOT NULL,
   FILE_CONTENT       BLOB(2M)               NOT LOGGED NOT COMPACT,
   UPLOAD_DATE        TIMESTAMP              NOT NULL,
   CONT_FILE_SIZE     INTEGER                NOT NULL,
   PRIMARY KEY (PO_ATTACH_ID)
);

--==============================================================
-- TABLE: PO_HISTORY
--==============================================================
CREATE TABLE PO_HISTORY
(
   PO_HIS_ID          INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   PO_NO              VARCHAR(16)            NOT NULL,
   PO_STATUS          INTEGER                NOT NULL,
   EXCHANGE_RATE      NUMERIC(11,4)          NOT NULL,
   BASE_AMOUNT        NUMERIC(14,2)          NOT NULL,
   LIST_ID            VARCHAR(32)            NOT NULL,
   PRIMARY KEY (PO_HIS_ID)
);

--==============================================================
-- TABLE: PO_ITEM
--==============================================================
CREATE TABLE PO_ITEM
(
   PO_ITEM_ID         INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   PO_NO              VARCHAR(16),
   SUPP_ID            INTEGER,
   SUPP_NM            VARCHAR(50),
   ITEM_ID            INTEGER,
   ITEM_SEPC          VARCHAR(255)           NOT NULL,
   EXCH_RATE_ID       INTEGER                NOT NULL,
   UNIT_PRICE         NUMERIC(12,2)          NOT NULL,
   QUANTITY           INTEGER                NOT NULL,
   DUE_DATE           TIMESTAMP,
   BUY_FOR_DEP        SMALLINT,
   BUY_FOR_USER       INTEGER,
   IS_RECHARGE        INTEGER                NOT NULL,
   PUR_TYPE_CD        VARCHAR(8),
   RECEIVE_QTY        INTEGER                NOT NULL,
   RETURN_QTY         INTEGER                NOT NULL,
   CANCEL_QTY         INTEGER                NOT NULL,
   PR_ITEM_ID         INTEGER,
   DESCRIPTION        VARCHAR(24),
   PRIMARY KEY (PO_ITEM_ID)
);

--==============================================================
-- TABLE: PO_ITEM_ATTACH
--==============================================================
CREATE TABLE PO_ITEM_ATTACH
(
   PO_ITEM_ATT_ID     INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   PO_ITEM_ID         INTEGER,
   FILE_TITLE         VARCHAR(50)            NOT NULL,
   FILE_NAME          VARCHAR(255)           NOT NULL,
   FILE_CONTENT       BLOB(2M)               NOT LOGGED NOT COMPACT,
   UPLOAD_DATE        TIMESTAMP              NOT NULL,
   CONT_FILE_SIZE     INTEGER                NOT NULL,
   PRIMARY KEY (PO_ITEM_ATT_ID)
);

--==============================================================
-- TABLE: PO_ITEM_CANCEL
--==============================================================
CREATE TABLE PO_ITEM_CANCEL
(
   CANCEL_ID          INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   PO_ITEM_ID         INTEGER                NOT NULL,
   CANCEL_DATE        TIMESTAMP              NOT NULL,
   CANCEL_QTY         INTEGER                NOT NULL,
   CANCEL_USER        INTEGER                NOT NULL,
   EXPORT_STATUS      INTEGER                NOT NULL,
   PRIMARY KEY (CANCEL_ID)
);

--==============================================================
-- TABLE: PO_ITEM_HISTORY
--==============================================================
CREATE TABLE PO_ITEM_HISTORY
(
   PO_ITEM_HIS_ID     INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   PO_HIS_ID          INTEGER                NOT NULL,
   SUPP_ID            INTEGER,
   ITEM_ID            INTEGER,
   ITEM_SEPC          VARCHAR(255)           NOT NULL,
   EXCH_RATE_ID       INTEGER                NOT NULL,
   UNIT_PRICE         NUMERIC(12,2)          NOT NULL,
   QUANTITY           INTEGER                NOT NULL,
   DUE_DATE           TIMESTAMP,
   IS_RECHARGE        INTEGER                NOT NULL,
   PUR_TYPE_CD        VARCHAR(8),
   BUY_FOR_USER       INTEGER,
   BUY_FOR_DEP        SMALLINT,
   PRIMARY KEY (PO_ITEM_HIS_ID)
);

--==============================================================
-- TABLE: PO_ITEM_RECEIPT
--==============================================================
CREATE TABLE PO_ITEM_RECEIPT
(
   RCPT_ID            INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   PO_ITEM_ID         INTEGER                NOT NULL,
   RECEIVER1          INTEGER                NOT NULL,
   RCPT_DATE1         TIMESTAMP,
   RCPT_QTY1          INTEGER,
   RECEIVER2          INTEGER                NOT NULL,
   RCPT_DATE2         TIMESTAMP,
   RCPT_QTY2          INTEGER,
   EXPORT_STATUS      INTEGER                NOT NULL,
   PRIMARY KEY (RCPT_ID)
);

--==============================================================
-- TABLE: PO_ITEM_RECHARGE
--==============================================================
CREATE TABLE PO_ITEM_RECHARGE
(
   PO_ITM_RECHRGID    INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   PO_ITEM_ID         INTEGER                NOT NULL,
   CUST_CD            VARCHAR(17),
   PERSON_DEP_ID      SMALLINT,
   PERSON_ID          INTEGER,
   AMOUNT             NUMERIC(9,2)           NOT NULL,
   PRIMARY KEY (PO_ITM_RECHRGID)
);

--==============================================================
-- TABLE: PR_APPROVER
--==============================================================
CREATE TABLE PR_APPROVER
(
   LIST_ID            VARCHAR(32)            NOT NULL,
   APPROVER_ID        INTEGER                NOT NULL,
   APPROVE_SEQ        SMALLINT               NOT NULL,
   APPROVE_STATUS     INTEGER,
   APPROVE_DATE       TIMESTAMP,
   APPROVE_COMMENT    VARCHAR(255),
   CAN_MODIFY         INTEGER                NOT NULL,
   ACTUAL_APPROVER    INTEGER,
   YOUR_TURN_DATE 	  TIMESTAMP,
   EMAIL_DATE		  TIMESTAMP,
   EMAIL_TIMES		  INTEGER                NOT NULL DEFAULT 0,   
   PRIMARY KEY (LIST_ID, APPROVER_ID)
);

--==============================================================
-- TABLE: PR_ATTACH
--==============================================================
CREATE TABLE PR_ATTACH
(
   PR_ATTACH_ID       INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   PR_NO              VARCHAR(16),
   FILE_TITLE         VARCHAR(50)            NOT NULL,
   FILE_NAME          VARCHAR(255)           NOT NULL,
   FILE_CONTENT       BLOB(2M)               NOT LOGGED NOT COMPACT,
   UPLOAD_DATE        TIMESTAMP              NOT NULL,
   CONT_FILE_SIZE     INTEGER                NOT NULL,
   PRIMARY KEY (PR_ATTACH_ID)
);

--==============================================================
-- TABLE: PR_AUTHORIZED_PURCHASER
--==============================================================
CREATE TABLE PR_AUTHORIZED_PURCHASER
(
   PR_AUTH_PUR_ID     INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   PR_NO              VARCHAR(16)            NOT NULL,
   PURCHASER          INTEGER                NOT NULL,
   PRIMARY KEY (PR_AUTH_PUR_ID)
);

--==============================================================
-- TABLE: PR_HISTORY
--==============================================================
CREATE TABLE PR_HISTORY
(
   PR_HIST_ID         INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   PR_NO              VARCHAR(16)            NOT NULL,
   PR_STATUS          INTEGER                NOT NULL,
   LIST_ID            VARCHAR(32)            NOT NULL,
   PRIMARY KEY (PR_HIST_ID)
);

--==============================================================
-- TABLE: PR_ITEM
--==============================================================
CREATE TABLE PR_ITEM
(
   PR_ITEM_ID         INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   PR_NO              VARCHAR(16)            NOT NULL,
   SUPP_NM            VARCHAR(50),
   ITEM_ID            INTEGER,
   ITEM_SEPC          VARCHAR(255)           NOT NULL,
   EXCH_RATE_ID       INTEGER                NOT NULL,
   EXCHANGE_RATE      NUMERIC(11,4)          NOT NULL,
   UNIT_PRICE         NUMERIC(12,2)          NOT NULL,
   QUANTITY           INTEGER                NOT NULL,
   DUE_DATE           TIMESTAMP,
   BUY_FOR_DEP        SMALLINT,
   BUY_FOR_USER       INTEGER,
   SUPP_ID            INTEGER,
   IS_RECHARGE        INTEGER                NOT NULL,
   PO_ITEM_ID         INTEGER,
   PRIMARY KEY (PR_ITEM_ID)
);

--==============================================================
-- TABLE: PR_ITEM_ATTACH
--==============================================================
CREATE TABLE PR_ITEM_ATTACH
(
   PR_ITEM_ATT_ID     INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   PR_ITEM_ID         INTEGER,
   FILE_TITLE         VARCHAR(50)            NOT NULL,
   FILE_NAME          VARCHAR(255)           NOT NULL,
   FILE_CONTENT       BLOB(2M)               NOT LOGGED NOT COMPACT,
   UPLOAD_DATE        TIMESTAMP              NOT NULL,
   CONT_FILE_SIZE     INTEGER                NOT NULL,
   PRIMARY KEY (PR_ITEM_ATT_ID)
);

--==============================================================
-- TABLE: PR_ITEM_HISTORY
--==============================================================
CREATE TABLE PR_ITEM_HISTORY
(
   PR_ITEM_HIST_ID    INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   PR_HIST_ID         INTEGER                NOT NULL,
   SUPP_NM            VARCHAR(50),
   ITEM_ID            INTEGER,
   ITEM_SEPC          VARCHAR(255)           NOT NULL,
   EXCH_RATE_ID       INTEGER                NOT NULL,
   EXCHANGE_RATE      NUMERIC(11,4)          NOT NULL,
   UNIT_PRICE         NUMERIC(12,2)          NOT NULL,
   QUANTITY           INTEGER                NOT NULL,
   DUE_DATE           TIMESTAMP,
   SUPP_ID            INTEGER,
   IS_RECHARGE        INTEGER                NOT NULL,
   BUY_FOR_USER       INTEGER,
   BUY_FOR_DEP        SMALLINT,
   PRIMARY KEY (PR_ITEM_HIST_ID)
);

--==============================================================
-- TABLE: PR_ITEM_RECHARGE
--==============================================================
CREATE TABLE PR_ITEM_RECHARGE
(
   PR_ITM_RECHRGID    INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   PR_ITEM_ID         INTEGER                NOT NULL,
   CUST_CD            VARCHAR(17),
   PERSON_DEP_ID      SMALLINT,
   PERSON_ID          INTEGER,
   AMOUNT             NUMERIC(9,2)           NOT NULL,
   PRIMARY KEY (PR_ITM_RECHRGID)
);

--==============================================================
-- TABLE: PROVINCE
--==============================================================
CREATE TABLE PROVINCE
(
   PROVINCE_ID        SMALLINT               NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   COUNTRY_ID         SMALLINT               NOT NULL,
   MAINT_SITE         SMALLINT,
   ENG_NAME           VARCHAR(50)            NOT NULL,
   SEC_NAME           VARCHAR(50)            NOT NULL,
   IS_ENABLED         INTEGER                NOT NULL DEFAULT 1,
   PRIMARY KEY (PROVINCE_ID)
);

--==============================================================
-- TABLE: PURCHASE_CTGY
--==============================================================
CREATE TABLE PURCHASE_CTGY
(
   PUR_CTGY_ID        INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   PUR_CTGY_DESC      VARCHAR(50)            NOT NULL,
   PUR_CTGY_SITE      SMALLINT,
   IS_ENABLED         INTEGER                NOT NULL DEFAULT 1,
   PRIMARY KEY (PUR_CTGY_ID)
);

--==============================================================
-- TABLE: PURCHASE_ORDER
--==============================================================
CREATE TABLE PURCHASE_ORDER
(
   PO_NO              VARCHAR(16)            NOT NULL,
   PO_SITE            SMALLINT               NOT NULL,
   REF_ERP_NO         VARCHAR(16),
   PO_TITLE           VARCHAR(50)            NOT NULL,
   PO_DESC            VARCHAR(500),
   SUPP_ID            INTEGER,
   PUR_SUBCTGY_ID     INTEGER,
   PUR_AMOUNT         NUMERIC(14,2)          NOT NULL,
   BASE_CURR_CD       VARCHAR(8)             NOT NULL,
   EXCH_RATE_ID       INTEGER                NOT NULL,
   EXCHANGE_RATE      NUMERIC(11,4)          NOT NULL,
   PO_STATUS          INTEGER                NOT NULL,
   CREATE_USER        INTEGER                NOT NULL,
   CREATE_DATE        TIMESTAMP              NOT NULL,
   REQUEST_DATE       TIMESTAMP,
   EXPORT_STATUS      INTEGER                NOT NULL,
   PURCHASER          INTEGER                NOT NULL,
   LIST_ID            VARCHAR(32),
   INSPECTOR          INTEGER,
   RECEIVER           VARCHAR(50),
   RECEIVE_ADDR       VARCHAR(255),
   ROW_VERSION        INTEGER                NOT NULL,
   EMAIL_DATE         TIMESTAMP,
   EMAIL_TIMES        INTEGER                NOT NULL DEFAULT 0,
   APPROVE_DATE       TIMESTAMP,
   CONFIRMER		  INTEGER,
   CONFIRM_DATE       TIMESTAMP,
   PRIMARY KEY (PO_NO)
);

--==============================================================
-- TABLE: PURCHASE_REQUEST
--==============================================================
CREATE TABLE PURCHASE_REQUEST
(
   PR_NO              VARCHAR(16)            NOT NULL,
   PR_TITLE           VARCHAR(50)            NOT NULL,
   PR_DESC            VARCHAR(500),
   PUR_SUBCTGY_ID     INTEGER                NOT NULL,
   PR_DEP_ID          SMALLINT               NOT NULL,
   PR_STATUS          INTEGER                NOT NULL,
   PR_CAPEX_NO        VARCHAR(16),
   PR_BUDGET_ID       INTEGER,
   BASE_CURR_CD       VARCHAR(8)             NOT NULL,
   REQUESTOR          INTEGER                NOT NULL,
   REQ_DATE           TIMESTAMP,
   CREATOR            INTEGER                NOT NULL,
   CREATE_DATE        TIMESTAMP              NOT NULL,
   PR_PURCHASER       INTEGER,
   LIST_ID            VARCHAR(32),
   BASE_AMT           DECIMAL(11,2),
   APPROVE_DATE       TIMESTAMP,
   ROW_VERSION        INTEGER                NOT NULL,
   IS_DELEGATE        INTEGER                NOT NULL,
   EMAIL_DATE         TIMESTAMP,
   EMAIL_TIMES        INTEGER                NOT NULL DEFAULT 0,
   PRIMARY KEY (PR_NO)
);

--==============================================================
-- TABLE: PURCHASE_SUBCTGY
--==============================================================
CREATE TABLE PURCHASE_SUBCTGY
(
   PUR_SUBCTGY_ID     INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   PUR_CTGY_ID        INTEGER                NOT NULL,
   DEF_SUPPLIER       INTEGER,
   PUR_SUBCTGY_DES    VARCHAR(50)            NOT NULL,
   IS_ENABLED         INTEGER                NOT NULL DEFAULT 1,
   INSPECTOR          INTEGER,
   PRIMARY KEY (PUR_SUBCTGY_ID)
);

--==============================================================
-- TABLE: PURCHASE_TYPE
--==============================================================
CREATE TABLE PURCHASE_TYPE
(
   PUR_TYPE_CD        VARCHAR(8)             NOT NULL,
   PUR_TYPE_DESC      VARCHAR(50)            NOT NULL,
   PUR_TYPE_SITE      SMALLINT               NOT NULL,
   IS_ENABLED         INTEGER                NOT NULL DEFAULT 1,
   PRIMARY KEY (PUR_TYPE_CD)
);

--==============================================================
-- TABLE: ROLE
--==============================================================
CREATE TABLE ROLE
(
   ROLE_ID            INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   ROLE_NM            VARCHAR(50)            NOT NULL,
   ROLE_DESC          VARCHAR(255),
   ROLE_TYPE          INTEGER                NOT NULL,
   PRIMARY KEY (ROLE_ID)
);

--==============================================================
-- TABLE: ROLE_FUNCTION
--==============================================================
CREATE TABLE ROLE_FUNCTION
(
   FUNC_ID            INTEGER                NOT NULL,
   ROLE_ID            INTEGER                NOT NULL,
   PRIMARY KEY (FUNC_ID, ROLE_ID)
);

--==============================================================
-- TABLE: RULE
--==============================================================
CREATE TABLE RULE
(
   RULE_ID            INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   RULE_TYPE          INTEGER                NOT NULL,
   RULE_DESC          VARCHAR(255)           NOT NULL,
   RULE_SITE          SMALLINT               NOT NULL,
   IS_ENABLED         INTEGER                NOT NULL,
   PRIMARY KEY (RULE_ID)
);

--==============================================================
-- TABLE: RULE_CONDITION
--==============================================================
CREATE TABLE RULE_CONDITION
(
   RULE_ID            INTEGER                NOT NULL,
   CONDITION_TYPE     INTEGER                NOT NULL,
   COMPARE_SYMBOL     INTEGER                NOT NULL,
   COMPARE_VALUE      VARCHAR(50)            NOT NULL,
   PRIMARY KEY (RULE_ID, CONDITION_TYPE)
);

--==============================================================
-- TABLE: RULE_CONSEQUENCE
--==============================================================
CREATE TABLE RULE_CONSEQUENCE
(
   RULE_ID            INTEGER                NOT NULL,
   USER_ID            INTEGER                NOT NULL,
   SEQ_NO             SMALLINT               NOT NULL,
   CAN_MODIFY         INTEGER                NOT NULL,
   SUPERIOR           INTEGER,
   PRIMARY KEY (RULE_ID, USER_ID)
);

--==============================================================
-- TABLE: RULE_FLOW
--==============================================================
CREATE TABLE RULE_FLOW
(
   FLOW_ID            INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   FLOW_TYPE          INTEGER                NOT NULL,
   FLOW_SITE          SMALLINT               NOT NULL,
   FLOW_DESC          VARCHAR(255)           NOT NULL,
   IS_ENABLED         INTEGER                NOT NULL,
   PRIMARY KEY (FLOW_ID)
);

--==============================================================
-- TABLE: RULE_FLOW_RULE
--==============================================================
CREATE TABLE RULE_FLOW_RULE
(
   FLOW_ID            INTEGER                NOT NULL,
   SEQ_NO             SMALLINT               NOT NULL,
   RULE_ID            INTEGER                NOT NULL,
   PASS_NEXT          SMALLINT,
   FAIL_NEXT          SMALLINT,
   PRIMARY KEY (FLOW_ID, SEQ_NO)
);

--==============================================================
-- TABLE: SITE
--==============================================================
CREATE TABLE SITE
(
   SITE_ID            SMALLINT               NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   SITE_NM            VARCHAR(50)            NOT NULL,
   SITE_CURR          VARCHAR(8)             NOT NULL,
   SITE_LOGO          BLOB(2M)               NOT LOGGED NOT COMPACT,
   SITE_CITY          SMALLINT               NOT NULL,
   SITE_MGR           INTEGER,
   CAN_RECHARGE       INTEGER                NOT NULL,
   IS_ENABLED         INTEGER                NOT NULL DEFAULT 1,
   SITE_ACTIVITY      VARCHAR(50)     		 NOT NULL,
   PRIMARY KEY (SITE_ID)
);

--==============================================================
-- TABLE: SITE_MAIL_RMD
--==============================================================
CREATE TABLE SITE_MAIL_RMD
(
   SITE_ID            SMALLINT               NOT NULL,
   MD_DET_ID          INTEGER                NOT NULL,
   DUE_DAY            SMALLINT,
   INTERVAL_DAY       SMALLINT,
   MAX_TIME           SMALLINT,
   PRIMARY KEY (SITE_ID, MD_DET_ID)
);

--==============================================================
-- TABLE: SUPPLIER
--==============================================================
CREATE TABLE SUPPLIER
(
   SUPP_ID            INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   SUPP_CD            VARCHAR(8),
   SUPP_SITE          SMALLINT,
   SUPP_NM            VARCHAR(50),
   SUPP_ADDRESS1      VARCHAR(50),
   SUPP_ADDRESS2      VARCHAR(50),
   SUPP_ADDRESS3      VARCHAR(50),
   SUPP_CITY          SMALLINT,
   SUPP_POST          VARCHAR(9),
   SUPP_ATTENTION1    VARCHAR(24),
   SUPP_ATTENTION2    VARCHAR(24),
   SUPP_TELE1         VARCHAR(16),
   SUPP_EXT1          VARCHAR(4),
   SUPP_TELE2         VARCHAR(16),
   SUPP_EXT2          VARCHAR(4),
   SUPP_FAX1          VARCHAR(16),
   SUPP_FAX2          VARCHAR(16),
   SUPP_PUR_ACCNT     VARCHAR(8),
   SUPP_PUR_SUBANT    VARCHAR(8),
   SUPP_PUR_CSTCEN    VARCHAR(8),
   SUPP_AP_ACCOUNT    VARCHAR(8),
   SUPP_AP_SUBACNT    VARCHAR(8),
   SUPP_AP_CSTCEN     VARCHAR(8),
   SUPP_BANK          VARCHAR(8),
   SUPP_CURR_CODE     VARCHAR(8),
   SUPP_CR_TERMS      VARCHAR(20),
   SUPP_CONTACT       VARCHAR(20),
   CONT_FR_DATE       TIMESTAMP,
   CONT_TO_DATE       TIMESTAMP,
   IS_AIR_TKT_SUPP    INTEGER                NOT NULL,
   PROMOTE_STATUS     INTEGER,
   PROMOTE_MSG        VARCHAR(500),
   PROMOTE_DATE       TIMESTAMP,
   IS_CONFIRMED       INTEGER                NOT NULL,
   EXPORT_STATUS      INTEGER                NOT NULL,
   IS_ENABLED         INTEGER                NOT NULL DEFAULT 1,
   SUPP_CNFM_STA      INTEGER                NOT NULL,
   LAST_EXP_FILE      VARCHAR(30),
   CONFIRM_DATE       TIMESTAMP,
   EMAIL_DATE         TIMESTAMP,
   EMAIL_TIMES        INTEGER                NOT NULL DEFAULT 0,
   SUPP_COUNTRY       SMALLINT               NOT NULL,
   LAST_MODIFY_DATE   TIMESTAMP,
   PRIMARY KEY (SUPP_ID)
);

--==============================================================
-- TABLE: SUPPLIER_CONTRACT
--==============================================================
CREATE TABLE SUPPLIER_CONTRACT
(
   CONT_ID            INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   SUPP_ID            INTEGER                NOT NULL,
   CONT_FILE_NM       VARCHAR(50)            NOT NULL,
   CONT_FILE_DESC     VARCHAR(20)            NOT NULL,
   CONT_FILECONTNT    BLOB(2M)               NOT LOGGED NOT COMPACT,
   CONT_UPLOADDATE    TIMESTAMP              NOT NULL,
   CONT_FILE_SIZE     INTEGER                NOT NULL,
   PRIMARY KEY (CONT_ID)
);

--==============================================================
-- TABLE: SUPPLIER_HISTORY
--==============================================================
CREATE TABLE SUPPLIER_HISTORY
(
   SUPP_ID            INTEGER                NOT NULL,
   SUPP_CD            VARCHAR(8)             NOT NULL,
   SUPP_SITE          SMALLINT,
   SUPP_NAME          VARCHAR(50),
   SUPP_ADDRESS1      VARCHAR(50),
   SUPP_ADDRESS2      VARCHAR(50),
   SUPP_ADDRESS3      VARCHAR(50),
   SUPP_CITY          SMALLINT,
   SUPP_POST          VARCHAR(9),
   SUPP_ATTENTION1    VARCHAR(24),
   SUPP_ATTENTION2    VARCHAR(24),
   SUPP_TELE1         VARCHAR(16),
   SUPP_EXT1          VARCHAR(4),
   SUPP_TELE2         VARCHAR(16),
   SUPP_EXT2          VARCHAR(4),
   SUPP_FAX1          VARCHAR(16),
   SUPP_FAX2          VARCHAR(16),
   SUPP_PUR_ACCNT     VARCHAR(8),
   SUPP_PUR_SUBANT    VARCHAR(8),
   SUPP_PUR_CSTCEN    VARCHAR(8),
   SUPP_AP_ACCOUNT    VARCHAR(8),
   SUPP_AP_SUBACNT    VARCHAR(8),
   SUPP_AP_CSTCEN     VARCHAR(8),
   SUPP_BANK          VARCHAR(8),
   SUPP_CURR_CODE     VARCHAR(8),
   SUPP_CR_TERMS      VARCHAR(20),
   SUPP_CONTACT       VARCHAR(20),
   CONT_FR_DATE       TIMESTAMP,
   CONT_TO_DATE       TIMESTAMP,
   IS_AIR_TKT_SUPP    INTEGER                NOT NULL,
   IS_ENABLED         INTEGER                NOT NULL DEFAULT 1,
   CONFIRM_DATE       TIMESTAMP,
   PROMOTE_STATUS     INTEGER                NOT NULL,
   SUPP_COUNTRY       SMALLINT               NOT NULL,
   PRIMARY KEY (SUPP_ID)
);

--==============================================================
-- TABLE: SUPPLIER_ITEM
--==============================================================
CREATE TABLE SUPPLIER_ITEM
(
   ITEM_ID            INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   SUPP_ID            INTEGER                NOT NULL,
   PUR_SUBCTGY_ID     INTEGER                NOT NULL,
   CURR_CD            VARCHAR(8)             NOT NULL,
   ITEM_SEPC          VARCHAR(255)           NOT NULL,
   ITEM_UNIT_PRICE    NUMERIC(12,2)          NOT NULL,
   IS_ENABLED         INTEGER                NOT NULL DEFAULT 1,
   REF_ERP_NO         VARCHAR(8),
   PRIMARY KEY (ITEM_ID)
);

--==============================================================
-- TABLE: SYSTEM_LOG
--==============================================================
CREATE TABLE SYSTEM_LOG
(
   LOG_ID             INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   SITE_ID            SMALLINT               NOT NULL,
   OBJECT             VARCHAR(50)            NOT NULL,
   OBJ_ID             VARCHAR(255)           NOT NULL,
   ACTION             VARCHAR(50)            NOT NULL,
   KEY_FIELD          VARCHAR(255),
   ACTION_TIME        TIMESTAMP              NOT NULL,
   USER_ID            INTEGER,
   PRIMARY KEY (LOG_ID)
);

--==============================================================
-- TABLE: TA_APPROVER
--==============================================================
CREATE TABLE TA_APPROVER
(
   LIST_ID            VARCHAR(32)            NOT NULL,
   APPROVER_ID        INTEGER                NOT NULL,
   APPROVE_SEQ        SMALLINT               NOT NULL,
   APPROVE_STATUS     INTEGER                NOT NULL,
   APPROVE_DATE       TIMESTAMP,
   APPROVE_COMMENT    VARCHAR(255),
   CAN_MODIFY         INTEGER                NOT NULL,
   ACTUAL_APPROVER    INTEGER,
   YOUR_TURN_DATE 	  TIMESTAMP,
   EMAIL_DATE		  TIMESTAMP,
   EMAIL_TIMES		  INTEGER                NOT NULL DEFAULT 0,   
   PRIMARY KEY (LIST_ID, APPROVER_ID)
);

--==============================================================
-- TABLE: TA_HISTORY
--==============================================================
CREATE TABLE TA_HISTORY
(
   TA_HIS_ID          INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   TA_NO              VARCHAR(16)            NOT NULL,
   TA_STATUS          INTEGER                NOT NULL,
   FR_CITY            SMALLINT               NOT NULL,
   TO_CITY            SMALLINT               NOT NULL,
   HOTEL_ID           INTEGER,
   HOTEL_NM           VARCHAR(50),
   ROOM_ID            INTEGER,
   ROOM_DESC          VARCHAR(50),
   CHK_IN_DATE        TIMESTAMP,
   CHK_OUT_DATE       TIMESTAMP,
   TRAVEL_MODE        INTEGER                NOT NULL,
   SGL_OR_RTN         INTEGER                NOT NULL,
   TRAVEL_DATE_FR     DATE,
   TRAVEL_DATE_TO     DATE,
   LEAVE_TIME         TIME,
   BACK_TIME          TIME,
   LIST_ID            VARCHAR(32),
   PRIMARY KEY (TA_HIS_ID)
);

--==============================================================
-- TABLE: TRAVEL_APPLICATION
--==============================================================
CREATE TABLE TRAVEL_APPLICATION
(
   TA_NO              VARCHAR(16)            NOT NULL,
   TA_DEP             SMALLINT               NOT NULL,
   TA_TITLE           VARCHAR(50)            NOT NULL,
   TA_DESC            VARCHAR(500),
   TA_STATUS          INTEGER                NOT NULL,
   FR_CITY            SMALLINT               NOT NULL,
   TO_CITY            SMALLINT               NOT NULL,
   HOTEL_ID           INTEGER,
   HOTEL_NM           VARCHAR(50),
   ROOM_ID            INTEGER,
   ROOM_DESC          VARCHAR(50),
   CHK_IN_DATE        TIMESTAMP,
   CHK_OUT_DATE       TIMESTAMP,
   TRAVEL_MODE        INTEGER                NOT NULL,
   SGL_OR_RTN         INTEGER                NOT NULL,
   TRAVEL_DATE_FR     DATE,
   TRAVEL_DATE_TO     DATE,
   LEAVE_TIME         TIME,
   BACK_TIME          TIME,
   REQUESTOR          INTEGER                NOT NULL,
   REQ_DATE           TIMESTAMP,
   CREATOR            INTEGER                NOT NULL,
   CREATE_DATE        TIMESTAMP              NOT NULL,
   LIST_ID            VARCHAR(32),
   REQUEST_TYPE       INTEGER                NOT NULL,
   BOOK_TYPE          INTEGER                NOT NULL,
   BOOKER             INTEGER,
   APPROVE_DATE       TIMESTAMP,
   EMAIL_DATE         TIMESTAMP,
   EMAIL_TIMES        INTEGER                NOT NULL DEFAULT 0,
   TA_FEE             NUMERIC(14,2)          NOT NULL DEFAULT 0,
   IS_ON_TRAVEL		  INTEGER                NOT NULL DEFAULT 1,
   PRIMARY KEY (TA_NO)
);

--==============================================================
-- TABLE: TRAVEL_GROUP_DET
--==============================================================
CREATE TABLE TRAVEL_GROUP_DET
(
   TVL_GRP_ID         INTEGER                NOT NULL,
   EXP_SUBCTGY_ID     INTEGER                NOT NULL,
   DOMES_AMT_LIMIT    NUMERIC(9,2),
   OVERS_AMT_LIMIT    NUMERIC(9,2),
   PRIMARY KEY (TVL_GRP_ID, EXP_SUBCTGY_ID)
);

--==============================================================
-- TABLE: TRAVEL_GROUP_MST
--==============================================================
CREATE TABLE TRAVEL_GROUP_MST
(
   TVL_GRP_ID         INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   TVL_GRP_NM         VARCHAR(50)            NOT NULL,
   TVL_GRP_SITE       SMALLINT               NOT NULL,
   IS_ENABLED         INTEGER                NOT NULL DEFAULT 1,
   PRIMARY KEY (TVL_GRP_ID)
);

--==============================================================
-- TABLE: USER_DEPARTMENT
--==============================================================
CREATE TABLE USER_DEPARTMENT
(
   USER_ID            INTEGER                NOT NULL,
   DEP_ID             SMALLINT               NOT NULL,
   TITLE              VARCHAR(50),
   PRIMARY KEY (USER_ID, DEP_ID)
);

--==============================================================
-- TABLE: USER_ROLE
--==============================================================
CREATE TABLE USER_ROLE
(
   USER_ROLE_ID       INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   GRANTED_SITE       SMALLINT,
   GRANTED_DEP        SMALLINT,
   USER_ID            INTEGER                NOT NULL,
   ROLE_ID            INTEGER                NOT NULL,
   PRIMARY KEY (USER_ROLE_ID)
);

--==============================================================
-- TABLE: USER_SITE
--==============================================================
CREATE TABLE USER_SITE
(
   USER_ID            INTEGER                NOT NULL,
   SITE_ID            SMALLINT               NOT NULL,
   TVL_GRP_ID         INTEGER                NOT NULL,
   PRIMARY KEY (USER_ID, SITE_ID)
);

--==============================================================
-- TABLE: YEARLY_BGT_DEP_HISTORY
--==============================================================
CREATE TABLE YEARLY_BGT_DEP_HISTORY
(
   BG_HIST_DEP_ID     INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   BUDGET_HIST_ID     INTEGER                NOT NULL,
   BUDGET_DEP_ID      SMALLINT               NOT NULL,
   PRIMARY KEY (BG_HIST_DEP_ID)
);

--==============================================================
-- TABLE: YEARLY_BUDGET
--==============================================================
CREATE TABLE YEARLY_BUDGET
(
   BUDGET_ID          INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   BUDGET_SITE        SMALLINT               NOT NULL,
   BUDGET_CD          VARCHAR(20)            NOT NULL,
   BUDGET_NM          VARCHAR(50)            NOT NULL,
   BUDGET_TYPE        INTEGER                NOT NULL,
   BUDGET_YEAR        SMALLINT               NOT NULL,
   BUDGET_AMT         NUMERIC(14,2)          NOT NULL,
   BUDGET_ACTULAMT    NUMERIC(14,2)          NOT NULL,
   PUR_CTGY_ID        INTEGER,
   PUR_SUBCTGY_ID     INTEGER,
   BUDGET_VERSION     SMALLINT               NOT NULL,
   BUDGET_STATUS      INTEGER                NOT NULL,
   IS_FREEZE          INTEGER                NOT NULL,
   CREATE_USER        INTEGER                NOT NULL,
   CREATE_DATE        TIMESTAMP              NOT NULL,
   MODIFY_USER        INTEGER,
   MODIFY_DATE        TIMESTAMP,
   ROW_VERSION        INTEGER                NOT NULL,
   PRIMARY KEY (BUDGET_ID)
);

--==============================================================
-- TABLE: YEARLY_BUDGET_DEPARTMENT
--==============================================================
CREATE TABLE YEARLY_BUDGET_DEPARTMENT
(
   BG_DEP_ID          INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   BUDGET_ID          INTEGER                NOT NULL,
   BUDGET_DEP_ID      SMALLINT               NOT NULL,
   PRIMARY KEY (BG_DEP_ID)
);

--==============================================================
-- TABLE: YEARLY_BUDGET_HISTORY
--==============================================================
CREATE TABLE YEARLY_BUDGET_HISTORY
(
   BUDGET_HIST_ID     INTEGER                NOT NULL GENERATED BY DEFAULT AS IDENTITY,
   BUDGET_ID          INTEGER                NOT NULL,
   BUDGET_VERSION     SMALLINT               NOT NULL,
   BUDGET_NM          VARCHAR(50)            NOT NULL,
   BUDGET_AMT         NUMERIC(14,2)          NOT NULL,
   CREATE_DATE        TIMESTAMP              NOT NULL,
   CREATE_USER        INTEGER                NOT NULL,
   PRIMARY KEY (BUDGET_HIST_ID)
);

ALTER TABLE AIR_TICKET
    ADD FOREIGN KEY (TA_NO) REFERENCES TRAVEL_APPLICATION (TA_NO) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (PO_ITEM_ID) REFERENCES PO_ITEM (PO_ITEM_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (RTN_PO_ITEM_ID) REFERENCES PO_ITEM (PO_ITEM_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (SUPP_ID) REFERENCES SUPPLIER (SUPP_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (LVE_FLT_FR) REFERENCES CITY (CITY_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (LVE_FLT_TO) REFERENCES CITY (CITY_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (RTN_FLT_FR) REFERENCES CITY (CITY_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (RTN_FLT_TO) REFERENCES CITY (CITY_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (EXCH_RATE_ID) REFERENCES EXCHANGE_RATE (EXCH_RATE_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (PUR_TYPE_CD) REFERENCES PURCHASE_TYPE (PUR_TYPE_CD) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE AIR_TICKET_RECHARGE
    ADD FOREIGN KEY (AIR_TICKET_ID) REFERENCES AIR_TICKET (AIR_TICKET_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (CUST_CD) REFERENCES CUSTOMER (CUST_CD) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (PERSON_DEP_ID) REFERENCES DEPARTMENT (DEP_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (PERSON_ID) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;
    
ALTER TABLE APPROVER_DELEGATE
    ADD FOREIGN KEY (ORG_APPROVER) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (DLGT_APPROVER) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE CAPEX
    ADD FOREIGN KEY (CAPEX_SITE) REFERENCES SITE (SITE_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (PUR_CTGY_ID) REFERENCES PURCHASE_CTGY (PUR_CTGY_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (PUR_SUBCTGY_ID) REFERENCES PURCHASE_SUBCTGY (PUR_SUBCTGY_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (BASE_CURR_CD) REFERENCES CURRENCY (CURR_CD) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (CAPEX_REQ_ID) REFERENCES CAPEX_REQUEST (CAPEX_REQ_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE CAPEX_DEPARTMENT
    ADD FOREIGN KEY (CAPEX_NO) REFERENCES CAPEX (CAPEX_NO) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (CAPEX_DEP_ID) REFERENCES DEPARTMENT (DEP_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE CAPEX_REQUEST
    ADD FOREIGN KEY (CAPEX_NO) REFERENCES CAPEX (CAPEX_NO) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (CREATOR) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (REQUESTOR) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (PROJ_LEADER_ID) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (REF_CURR_CD) REFERENCES CURRENCY (CURR_CD) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE CAPEX_REQUEST_APPROVER
    ADD FOREIGN KEY (APPROVER_ID) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (ACTUAL_APPROVER) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE CAPEX_REQUEST_ATTACH
    ADD FOREIGN KEY (CAPEX_REQ_ID) REFERENCES CAPEX_REQUEST (CAPEX_REQ_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE CAPEX_REQUEST_HISTORY
    ADD FOREIGN KEY (CAPEX_REQ_ID) REFERENCES CAPEX_REQUEST (CAPEX_REQ_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE CAPEX_REQUEST_ITEM
    ADD FOREIGN KEY (CAPEX_REQ_ID) REFERENCES CAPEX_REQUEST (CAPEX_REQ_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (PUR_SUBCTGY_ID) REFERENCES PURCHASE_SUBCTGY (PUR_SUBCTGY_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (SUPP_ID) REFERENCES SUPPLIER (SUPP_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (ITEM_ID) REFERENCES SUPPLIER_ITEM (ITEM_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (EXCH_RATE_ID) REFERENCES EXCHANGE_RATE (EXCH_RATE_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE CAPEX_REQ_ITEM_HISTORY
    ADD FOREIGN KEY (CR_HIST_ID) REFERENCES CAPEX_REQUEST_HISTORY (CR_HIST_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (PUR_SUBCTGY_ID) REFERENCES PURCHASE_SUBCTGY (PUR_SUBCTGY_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (SUPP_ID) REFERENCES SUPPLIER (SUPP_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (ITEM_ID) REFERENCES SUPPLIER_ITEM (ITEM_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (EXCH_RATE_ID) REFERENCES EXCHANGE_RATE (EXCH_RATE_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE CITY
    ADD FOREIGN KEY (PROVINCE_ID) REFERENCES PROVINCE (PROVINCE_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (MAINT_SITE) REFERENCES SITE (SITE_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE COUNTRY
    ADD FOREIGN KEY (MAINT_SITE) REFERENCES SITE (SITE_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE CUSTOMER
    ADD FOREIGN KEY (CUST_SITE) REFERENCES SITE (SITE_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE DEPARTMENT
    ADD FOREIGN KEY (DEP_SITE) REFERENCES SITE (SITE_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (PARENT_ID) REFERENCES DEPARTMENT (DEP_ID) ON DELETE CASCADE ON UPDATE RESTRICT
    ADD FOREIGN KEY (DEP_MGR) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE ERP_TRAN
    ADD FOREIGN KEY (SITE_ID) REFERENCES SITE (SITE_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE EXCHANGE_RATE
    ADD FOREIGN KEY (CURR_CODE) REFERENCES CURRENCY (CURR_CD) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE EXPENSE
    ADD FOREIGN KEY (TA_NO) REFERENCES TRAVEL_APPLICATION (TA_NO) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (EXP_DEP) REFERENCES DEPARTMENT (DEP_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (EXP_CTGY_ID) REFERENCES EXPENSE_CTGY (EXP_CTGY_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (EXP_CURR_CD) REFERENCES CURRENCY (CURR_CD) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (BASE_CURR_CD) REFERENCES CURRENCY (CURR_CD) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (REQUESTOR) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (CREATOR) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE EXPENSE_APPROVER
    ADD FOREIGN KEY (APPROVER_ID) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (ACTUAL_APPROVER) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE EXPENSE_ATTACH
    ADD FOREIGN KEY (EXP_NO) REFERENCES EXPENSE (EXP_NO) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE EXPENSE_CELL_DET
    ADD FOREIGN KEY (EXP_ROW_ID) REFERENCES EXPENSE_ROW_DET (EXP_ROW_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (EXP_SUBCTGY_ID) REFERENCES EXPENSE_SUBCTGY (EXP_SUBCTGY_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE EXPENSE_CLAIM
    ADD FOREIGN KEY (EXP_NO) REFERENCES EXPENSE (EXP_NO) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (EXP_SUBCTGY_ID) REFERENCES EXPENSE_SUBCTGY (EXP_SUBCTGY_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE EXPENSE_CTGY
    ADD FOREIGN KEY (EXP_CTGY_SITE) REFERENCES SITE (SITE_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE EXPENSE_HISTORY
    ADD FOREIGN KEY (EXP_NO) REFERENCES EXPENSE (EXP_NO) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE EXPENSE_RECHARGE
    ADD FOREIGN KEY (EXP_NO) REFERENCES EXPENSE (EXP_NO) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (CUST_CD) REFERENCES CUSTOMER (CUST_CD) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (PERSON_DEP_ID) REFERENCES DEPARTMENT (DEP_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (PERSON_ID) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE EXPENSE_ROW_DET 
    ADD FOREIGN KEY (EXP_NO) REFERENCES EXPENSE (EXP_NO) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE EXPENSE_SUBCTGY
    ADD FOREIGN KEY (EXP_CTGY_ID) REFERENCES EXPENSE_CTGY (EXP_CTGY_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE EXP_CELL_DET_HIST
    ADD FOREIGN KEY (EXP_HIST_ROW_ID) REFERENCES EXP_ROW_DET_HIST (EXP_HIST_ROW_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (EXP_SUBCTGY_ID) REFERENCES EXPENSE_SUBCTGY (EXP_SUBCTGY_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE EXP_ROW_DET_HIST
    ADD FOREIGN KEY (EXP_HIST_ID) REFERENCES EXPENSE_HISTORY (EXP_HIST_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE HOTEL
    ADD FOREIGN KEY (HOTEL_SITE) REFERENCES SITE (SITE_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (HOTEL_CITY) REFERENCES CITY (CITY_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (HOTEL_CURR) REFERENCES CURRENCY (CURR_CD) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE HOTEL_CONTRACT
    ADD FOREIGN KEY (HOTEL_ID) REFERENCES HOTEL (HOTEL_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE HOTEL_ROOM
    ADD FOREIGN KEY (HOTEL_ID) REFERENCES HOTEL (HOTEL_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE MENU
    ADD FOREIGN KEY (FUNC_ID) REFERENCES OA_FUNCTION (FUNC_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (PARENT_ID) REFERENCES MENU (MENU_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE METADATA_DET
    ADD FOREIGN KEY (MD_MST_ID) REFERENCES METADATA_MST (MD_MST_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE OA_USER
    ADD FOREIGN KEY (PRIMARY_SITE) REFERENCES SITE (SITE_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE PAYMENT_SCHDL_DET
    ADD FOREIGN KEY (PO_NO) REFERENCES PURCHASE_ORDER (PO_NO) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE PO_APPROVER
    ADD FOREIGN KEY (APPROVER_ID) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (ACTUAL_APPROVER) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE PO_ATTACH
    ADD FOREIGN KEY (PO_NO) REFERENCES PURCHASE_ORDER (PO_NO) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE PO_HISTORY
    ADD FOREIGN KEY (PO_NO) REFERENCES PURCHASE_ORDER (PO_NO) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE PO_ITEM
    ADD FOREIGN KEY (PO_NO) REFERENCES PURCHASE_ORDER (PO_NO) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (SUPP_ID) REFERENCES SUPPLIER (SUPP_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (ITEM_ID) REFERENCES SUPPLIER_ITEM (ITEM_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (EXCH_RATE_ID) REFERENCES EXCHANGE_RATE (EXCH_RATE_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (BUY_FOR_DEP) REFERENCES DEPARTMENT (DEP_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (BUY_FOR_USER) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (PUR_TYPE_CD) REFERENCES PURCHASE_TYPE (PUR_TYPE_CD) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (PR_ITEM_ID) REFERENCES PR_ITEM (PR_ITEM_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE PO_ITEM_ATTACH
    ADD FOREIGN KEY (PO_ITEM_ID) REFERENCES PO_ITEM (PO_ITEM_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE PO_ITEM_CANCEL
    ADD FOREIGN KEY (PO_ITEM_ID) REFERENCES PO_ITEM (PO_ITEM_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (CANCEL_USER) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE PO_ITEM_HISTORY
    ADD FOREIGN KEY (PO_HIS_ID) REFERENCES PO_HISTORY (PO_HIS_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (SUPP_ID) REFERENCES SUPPLIER (SUPP_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (ITEM_ID) REFERENCES SUPPLIER_ITEM (ITEM_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (EXCH_RATE_ID) REFERENCES EXCHANGE_RATE (EXCH_RATE_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (PUR_TYPE_CD) REFERENCES PURCHASE_TYPE (PUR_TYPE_CD) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (BUY_FOR_USER) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (BUY_FOR_DEP) REFERENCES DEPARTMENT (DEP_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE PO_ITEM_RECEIPT
    ADD FOREIGN KEY (PO_ITEM_ID) REFERENCES PO_ITEM (PO_ITEM_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (RECEIVER1) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (RECEIVER2) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE PO_ITEM_RECHARGE
    ADD FOREIGN KEY (PO_ITEM_ID) REFERENCES PO_ITEM (PO_ITEM_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (CUST_CD) REFERENCES CUSTOMER (CUST_CD) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (PERSON_DEP_ID) REFERENCES DEPARTMENT (DEP_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (PERSON_ID) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE PROVINCE
    ADD FOREIGN KEY (COUNTRY_ID) REFERENCES COUNTRY (COUNTRY_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (MAINT_SITE) REFERENCES SITE (SITE_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE PR_APPROVER
    ADD FOREIGN KEY (APPROVER_ID) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (ACTUAL_APPROVER) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE PR_ATTACH
    ADD FOREIGN KEY (PR_NO) REFERENCES PURCHASE_REQUEST (PR_NO) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE PR_AUTHORIZED_PURCHASER
    ADD FOREIGN KEY (PR_NO) REFERENCES PURCHASE_REQUEST (PR_NO) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (PURCHASER) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE PR_HISTORY
    ADD FOREIGN KEY (PR_NO) REFERENCES PURCHASE_REQUEST (PR_NO) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE PR_ITEM
    ADD FOREIGN KEY (PR_NO) REFERENCES PURCHASE_REQUEST (PR_NO) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (ITEM_ID) REFERENCES SUPPLIER_ITEM (ITEM_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (EXCH_RATE_ID) REFERENCES EXCHANGE_RATE (EXCH_RATE_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (BUY_FOR_DEP) REFERENCES DEPARTMENT (DEP_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (BUY_FOR_USER) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (SUPP_ID) REFERENCES SUPPLIER (SUPP_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (PO_ITEM_ID) REFERENCES PO_ITEM (PO_ITEM_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE PR_ITEM_ATTACH
    ADD FOREIGN KEY (PR_ITEM_ID) REFERENCES PR_ITEM (PR_ITEM_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE PR_ITEM_HISTORY
    ADD FOREIGN KEY (PR_HIST_ID) REFERENCES PR_HISTORY (PR_HIST_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (ITEM_ID) REFERENCES SUPPLIER_ITEM (ITEM_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (EXCH_RATE_ID) REFERENCES EXCHANGE_RATE (EXCH_RATE_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (SUPP_ID) REFERENCES SUPPLIER (SUPP_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (BUY_FOR_USER) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (BUY_FOR_DEP) REFERENCES DEPARTMENT (DEP_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE PR_ITEM_RECHARGE
    ADD FOREIGN KEY (PR_ITEM_ID) REFERENCES PR_ITEM (PR_ITEM_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (CUST_CD) REFERENCES CUSTOMER (CUST_CD) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (PERSON_DEP_ID) REFERENCES DEPARTMENT (DEP_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (PERSON_ID) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE PURCHASE_CTGY
    ADD FOREIGN KEY (PUR_CTGY_SITE) REFERENCES SITE (SITE_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE PURCHASE_ORDER 
    ADD FOREIGN KEY (PO_SITE) REFERENCES SITE (SITE_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (SUPP_ID) REFERENCES SUPPLIER (SUPP_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (PUR_SUBCTGY_ID) REFERENCES PURCHASE_SUBCTGY (PUR_SUBCTGY_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (BASE_CURR_CD) REFERENCES CURRENCY (CURR_CD) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (EXCH_RATE_ID) REFERENCES EXCHANGE_RATE (EXCH_RATE_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (CREATE_USER) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (PURCHASER) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (INSPECTOR) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (CONFIRMER) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE PURCHASE_REQUEST
    ADD FOREIGN KEY (PUR_SUBCTGY_ID) REFERENCES PURCHASE_SUBCTGY (PUR_SUBCTGY_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (PR_DEP_ID) REFERENCES DEPARTMENT (DEP_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (PR_CAPEX_NO) REFERENCES CAPEX (CAPEX_NO) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (PR_BUDGET_ID) REFERENCES YEARLY_BUDGET (BUDGET_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (BASE_CURR_CD) REFERENCES CURRENCY (CURR_CD) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (REQUESTOR) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (CREATOR) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (PR_PURCHASER) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE PURCHASE_SUBCTGY 
    ADD FOREIGN KEY (PUR_CTGY_ID) REFERENCES PURCHASE_CTGY (PUR_CTGY_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (INSPECTOR) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (DEF_SUPPLIER) REFERENCES SUPPLIER (SUPP_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE PURCHASE_TYPE
    ADD FOREIGN KEY (PUR_TYPE_SITE) REFERENCES SITE (SITE_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE ROLE_FUNCTION
    ADD FOREIGN KEY (FUNC_ID) REFERENCES OA_FUNCTION (FUNC_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (ROLE_ID) REFERENCES ROLE (ROLE_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE RULE
    ADD FOREIGN KEY (RULE_SITE) REFERENCES SITE (SITE_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE RULE_CONDITION
    ADD FOREIGN KEY (RULE_ID) REFERENCES RULE (RULE_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE RULE_CONSEQUENCE
    ADD FOREIGN KEY (RULE_ID) REFERENCES RULE (RULE_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (USER_ID) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (SUPERIOR) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE RULE_FLOW
    ADD FOREIGN KEY (FLOW_SITE) REFERENCES SITE (SITE_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE RULE_FLOW_RULE
    ADD FOREIGN KEY (FLOW_ID) REFERENCES RULE_FLOW (FLOW_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (RULE_ID) REFERENCES RULE (RULE_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE SITE
    ADD FOREIGN KEY (SITE_CURR) REFERENCES CURRENCY (CURR_CD) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (SITE_CITY) REFERENCES CITY (CITY_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (SITE_MGR) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE SITE_MAIL_RMD
    ADD FOREIGN KEY (SITE_ID) REFERENCES SITE (SITE_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE SUPPLIER
    ADD FOREIGN KEY (SUPP_SITE) REFERENCES SITE (SITE_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (SUPP_CITY) REFERENCES CITY (CITY_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (SUPP_CURR_CODE) REFERENCES CURRENCY (CURR_CD) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE SUPPLIER_CONTRACT
    ADD FOREIGN KEY (SUPP_ID) REFERENCES SUPPLIER (SUPP_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE SUPPLIER_HISTORY
    ADD FOREIGN KEY (SUPP_SITE) REFERENCES SITE (SITE_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (SUPP_CITY) REFERENCES CITY (CITY_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (SUPP_CURR_CODE) REFERENCES CURRENCY (CURR_CD) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE SUPPLIER_ITEM
    ADD FOREIGN KEY (SUPP_ID) REFERENCES SUPPLIER (SUPP_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (PUR_SUBCTGY_ID) REFERENCES PURCHASE_SUBCTGY (PUR_SUBCTGY_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (CURR_CD) REFERENCES CURRENCY (CURR_CD) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE SYSTEM_LOG
    ADD FOREIGN KEY (SITE_ID) REFERENCES SITE (SITE_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (USER_ID) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE TA_APPROVER
    ADD FOREIGN KEY (APPROVER_ID) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (ACTUAL_APPROVER) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE TA_HISTORY
    ADD FOREIGN KEY (TA_NO) REFERENCES TRAVEL_APPLICATION (TA_NO) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (FR_CITY) REFERENCES CITY (CITY_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (TO_CITY) REFERENCES CITY (CITY_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (HOTEL_ID) REFERENCES HOTEL (HOTEL_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (ROOM_ID) REFERENCES HOTEL_ROOM (ROOM_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE TRAVEL_APPLICATION
    ADD FOREIGN KEY (TA_DEP) REFERENCES DEPARTMENT (DEP_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (FR_CITY) REFERENCES CITY (CITY_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (TO_CITY) REFERENCES CITY (CITY_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (HOTEL_ID) REFERENCES HOTEL (HOTEL_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (ROOM_ID) REFERENCES HOTEL_ROOM (ROOM_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (REQUESTOR) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (CREATOR) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (BOOKER) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE TRAVEL_GROUP_DET
    ADD FOREIGN KEY (TVL_GRP_ID) REFERENCES TRAVEL_GROUP_MST (TVL_GRP_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (EXP_SUBCTGY_ID) REFERENCES EXPENSE_SUBCTGY (EXP_SUBCTGY_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE TRAVEL_GROUP_MST
    ADD FOREIGN KEY (TVL_GRP_SITE) REFERENCES SITE (SITE_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE USER_DEPARTMENT
    ADD FOREIGN KEY (USER_ID) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (DEP_ID) REFERENCES DEPARTMENT (DEP_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE USER_ROLE
    ADD FOREIGN KEY (GRANTED_SITE) REFERENCES SITE (SITE_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (GRANTED_DEP) REFERENCES DEPARTMENT (DEP_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (USER_ID) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (ROLE_ID) REFERENCES ROLE (ROLE_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE USER_SITE
    ADD FOREIGN KEY (USER_ID) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (SITE_ID) REFERENCES SITE (SITE_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (TVL_GRP_ID) REFERENCES TRAVEL_GROUP_MST (TVL_GRP_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE YEARLY_BGT_DEP_HISTORY
    ADD FOREIGN KEY (BUDGET_HIST_ID) REFERENCES YEARLY_BUDGET_HISTORY (BUDGET_HIST_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (BUDGET_DEP_ID) REFERENCES DEPARTMENT (DEP_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE YEARLY_BUDGET
    ADD FOREIGN KEY (BUDGET_SITE) REFERENCES SITE (SITE_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (PUR_CTGY_ID) REFERENCES PURCHASE_CTGY (PUR_CTGY_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (PUR_SUBCTGY_ID) REFERENCES PURCHASE_SUBCTGY (PUR_SUBCTGY_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (CREATE_USER) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (MODIFY_USER) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE YEARLY_BUDGET_DEPARTMENT
    ADD FOREIGN KEY (BUDGET_ID) REFERENCES YEARLY_BUDGET (BUDGET_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (BUDGET_DEP_ID) REFERENCES DEPARTMENT (DEP_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE YEARLY_BUDGET_HISTORY
    ADD FOREIGN KEY (BUDGET_ID) REFERENCES YEARLY_BUDGET (BUDGET_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
    ADD FOREIGN KEY (CREATE_USER) REFERENCES OA_USER (USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

CREATE UNIQUE INDEX UK_EXCHANGE_RATE ON EXCHANGE_RATE (CURR_CODE ASC, SITE_ID ASC);

CREATE UNIQUE INDEX UK_E_CELL_DET_HIST ON EXP_CELL_DET_HIST (EXP_HIST_ROW_ID ASC, EXP_SUBCTGY_ID ASC);

CREATE UNIQUE INDEX UK_EXP_CELL_DET ON EXPENSE_CELL_DET (EXP_ROW_ID ASC, EXP_SUBCTGY_ID ASC);

CREATE UNIQUE INDEX UK_EXPENSE_CLAIM ON EXPENSE_CLAIM (EXP_NO ASC, EXP_SUBCTGY_ID ASC);

CREATE UNIQUE INDEX UK_OA_USER ON OA_USER (USER_CD ASC);

CREATE UNIQUE INDEX UK_PR_AUTH_PUR ON PR_AUTHORIZED_PURCHASER (PR_NO ASC, PURCHASER ASC);

CREATE UNIQUE INDEX UK_USER_ROLE ON USER_ROLE (USER_ID ASC, ROLE_ID ASC, GRANTED_SITE ASC, GRANTED_DEP ASC);

CREATE UNIQUE INDEX UK_Y_BG_HIST_DEP ON YEARLY_BGT_DEP_HISTORY (BUDGET_HIST_ID ASC, BUDGET_DEP_ID ASC);

CREATE UNIQUE INDEX UK_YEARLY_BUDGET ON YEARLY_BUDGET (BUDGET_SITE ASC, BUDGET_CD ASC);

CREATE UNIQUE INDEX UK_YEARLY_BG_DEP ON YEARLY_BUDGET_DEPARTMENT (BUDGET_ID ASC, BUDGET_DEP_ID ASC);

CREATE UNIQUE INDEX UK_YEARLY_BG_HIST ON YEARLY_BUDGET_HISTORY (BUDGET_ID ASC, BUDGET_VERSION ASC);

