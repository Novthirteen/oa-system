/* =====================================================================
 *
 * Copyright (c) Sourceforge INFORMATION TECHNOLOGY All rights reserved.
 *
 * =====================================================================
 */

/*
 * WARNING: DO NOT EDIT THIS FILE. This is a generated file that is synchronized
 * by MyEclipse Hibernate tool integration.
 *
 * Created Fri Sep 23 14:49:24 CST 2005 by MyEclipse Hibernate Tool.
 */
package net.sourceforge.model.admin;

import java.io.Serializable;

import net.sourceforge.model.metadata.EnabledDisabled;

/**
 * A class that represents a row in the t_pur_subcate table. 
 * You can customize the behavior of this class by editing the class, {@link TPurSubcate()}.
 * WARNING: DO NOT EDIT THIS FILE. This is a generated file that is synchronized
 * by MyEclipse Hibernate tool integration.
 */
public abstract class AbstractPurchaseSubCategory 
    implements Serializable
{
    /** The cached hash code value for this instance.  Settting to 0 triggers re-calculation. */
    private int hashValue = 0;

    /** The composite primary key value. */
    private java.lang.Integer id;

    /** The value of the purchaseCategory association. */
    private PurchaseCategory purchaseCategory;

    /** The value of the simple defSupplier property. */
    private Supplier defaultSupplier;

    /** The value of the simple purSubcateDesc property. */
    private java.lang.String description;

    /** The value of the simple enabled property. */
    private EnabledDisabled enabled;
    
    private User inspector;

    /**
     * Simple constructor of AbstractTPurSubcate instances.
     */
    public AbstractPurchaseSubCategory()
    {
    }

    /**
     * Constructor of AbstractTPurSubcate instances given a simple primary key.
     * @param purSubcateId
     */
    public AbstractPurchaseSubCategory(java.lang.Integer purSubcateId)
    {
        this.setPurSubcateId(purSubcateId);
    }

    
    
    public User getInspector() {
        return inspector;
    }

    public void setInspector(User inspector) {
        this.inspector = inspector;
    }

    /**
     * Return the simple primary key value that identifies this object.
     * @return java.lang.Integer
     */
    public java.lang.Integer getId()
    {
        return id;
    }

    /**
     * Set the simple primary key value that identifies this object.
     * @param id
     */
    public void setPurSubcateId(java.lang.Integer id)
    {
        this.hashValue = 0;
        this.id = id;
    }

    
    
    /**
	 * @return Returns the defaultSupplier.
	 */
	public Supplier getDefaultSupplier() {
		return defaultSupplier;
	}

	/**
	 * @param defaultSupplier The defaultSupplier to set.
	 */
	public void setDefaultSupplier(Supplier defaultSupplier) {
		this.defaultSupplier = defaultSupplier;
	}

	/**
	 * @return Returns the description.
	 */
	public java.lang.String getDescription() {
		return description;
	}

	/**
	 * @param description The description to set.
	 */
	public void setDescription(java.lang.String description) {
		this.description = description;
	}

	/**
	 * @return Returns the enabled.
	 */
	public EnabledDisabled getEnabled() {
		return enabled;
	}

	/**
	 * @param enabled The enabled to set.
	 */
	public void setEnabled(EnabledDisabled enabled) {
		this.enabled = enabled;
	}

	/**
	 * @return Returns the purchaseCategory.
	 */
	public PurchaseCategory getPurchaseCategory() {
		return purchaseCategory;
	}

	/**
	 * @param purchaseCategory The purchaseCategory to set.
	 */
	public void setPurchaseCategory(PurchaseCategory purchaseCategory) {
		this.purchaseCategory = purchaseCategory;
	}

	/**
	 * @param id The id to set.
	 */
	public void setId(java.lang.Integer id) {
		this.id = id;
	}

	/**
     * Implementation of the equals comparison on the basis of equality of the primary key values.
     * @param rhs
     * @return boolean
     */
    public boolean equals(Object rhs)
    {
    	if (rhs == null) return false;
        if (this == rhs) return true;
        if (!(rhs instanceof PurchaseSubCategory)) return false;
        PurchaseSubCategory that = (PurchaseSubCategory) rhs;
        if (this.getId() != null) return this.getId().equals(that.getId());
        return that.getId() == null;
    }

    /**
     * Implementation of the hashCode method conforming to the Bloch pattern with
     * the exception of array properties (these are very unlikely primary key types).
     * @return int
     */
    public int hashCode()
    {
        if (this.hashValue == 0)
        {
            int result = 17;
            int purSubcateIdValue = this.getId() == null ? 0 : this.getId().hashCode();
            result = result * 37 + purSubcateIdValue;
            this.hashValue = result;
        }
        return this.hashValue;
    }
}
